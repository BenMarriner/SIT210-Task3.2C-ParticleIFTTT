
c:/Users/Ben/Desktop/IFTTT/target/2.1.0/argon/IFTTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001914  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5930  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e5dc  000d5934  0001e5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001ac  2003e644  2003e644  0002e644  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d599c  000d599c  0002599c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d59c4  000d59c4  000259c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f35e1  00000000  00000000  000259c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010b7c  00000000  00000000  00118fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f626  00000000  00000000  00129b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d78  00000000  00000000  0014914b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005b50  00000000  00000000  0014aec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032291  00000000  00000000  00150a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a1e9  00000000  00000000  00182ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ff4b0  00000000  00000000  001ace8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004e2c  00000000  00000000  002ac340  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fb59 	bl	d56e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fb61 	bl	d5700 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5dc 	.word	0x2003e5dc
   d4048:	000d5934 	.word	0x000d5934
   d404c:	2003e644 	.word	0x2003e644
   d4050:	2003e644 	.word	0x2003e644
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fbe7 	bl	d4830 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5900 	.word	0x000d5900
   d407c:	000d5924 	.word	0x000d5924

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b814 	b.w	d40ac <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f82b 	bl	d40e0 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bb91 	b.w	d47b4 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 ba41 	b.w	d4518 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 ba47 	b.w	d4528 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr
	...

000d40ac <setup>:

BH1750Lib sensor;
int lux;

void setup()
{
   d40ac:	b508      	push	{r3, lr}
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d40ae:	2202      	movs	r2, #2
   d40b0:	2300      	movs	r3, #0
   d40b2:	4908      	ldr	r1, [pc, #32]	; (d40d4 <setup+0x28>)
   d40b4:	4808      	ldr	r0, [pc, #32]	; (d40d8 <setup+0x2c>)
   d40b6:	f000 fa1f 	bl	d44f8 <spark_variable>
    Particle.variable("Luminosity", &lux, INT);
    sensor.begin(BH1750LIB_MODE_CONTINUOUSHIGHRES2);
   d40ba:	2111      	movs	r1, #17
   d40bc:	4807      	ldr	r0, [pc, #28]	; (d40dc <setup+0x30>)
   d40be:	f000 f864 	bl	d418a <_ZN9BH1750Lib5beginEh>
    Serial.begin(9600);
   d40c2:	f000 fcb5 	bl	d4a30 <_Z16_fetch_usbserialv>
}
   d40c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.begin(9600);
   d40ca:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ce:	f000 bca3 	b.w	d4a18 <_ZN9USBSerial5beginEl>
   d40d2:	bf00      	nop
   d40d4:	2003e648 	.word	0x2003e648
   d40d8:	000d577c 	.word	0x000d577c
   d40dc:	2003e64c 	.word	0x2003e64c

000d40e0 <loop>:

void loop()
{
   d40e0:	b538      	push	{r3, r4, r5, lr}
    lux = sensor.lightLevel();
   d40e2:	4812      	ldr	r0, [pc, #72]	; (d412c <loop+0x4c>)
   d40e4:	4c12      	ldr	r4, [pc, #72]	; (d4130 <loop+0x50>)
   d40e6:	f000 f85f 	bl	d41a8 <_ZN9BH1750Lib10lightLevelEv>
   d40ea:	6020      	str	r0, [r4, #0]

    Serial.print(lux);
   d40ec:	f000 fca0 	bl	d4a30 <_Z16_fetch_usbserialv>
   d40f0:	6824      	ldr	r4, [r4, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40f2:	2c00      	cmp	r4, #0
   d40f4:	4605      	mov	r5, r0
   d40f6:	da16      	bge.n	d4126 <loop+0x46>
            t = print('-');
   d40f8:	212d      	movs	r1, #45	; 0x2d
   d40fa:	f000 fad9 	bl	d46b0 <_ZN5Print5printEc>
            val = -n;
   d40fe:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4100:	220a      	movs	r2, #10
   d4102:	4628      	mov	r0, r5
   d4104:	f000 fae3 	bl	d46ce <_ZN5Print11printNumberEmh>
    Serial.print(" lx");
   d4108:	f000 fc92 	bl	d4a30 <_Z16_fetch_usbserialv>
   d410c:	4909      	ldr	r1, [pc, #36]	; (d4134 <loop+0x54>)
   d410e:	f000 facb 	bl	d46a8 <_ZN5Print5printEPKc>
    Serial.println();
   d4112:	f000 fc8d 	bl	d4a30 <_Z16_fetch_usbserialv>
   d4116:	f000 face 	bl	d46b6 <_ZN5Print7printlnEv>

    delay(1000);
   d411a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(1000);
   d411e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4122:	f000 bb05 	b.w	d4730 <delay>
            val = n;
   d4126:	4621      	mov	r1, r4
   d4128:	e7ea      	b.n	d4100 <loop+0x20>
   d412a:	bf00      	nop
   d412c:	2003e64c 	.word	0x2003e64c
   d4130:	2003e648 	.word	0x2003e648
   d4134:	000d5787 	.word	0x000d5787

000d4138 <_GLOBAL__sub_I_sensor>:
BH1750Lib sensor;
   d4138:	4801      	ldr	r0, [pc, #4]	; (d4140 <_GLOBAL__sub_I_sensor+0x8>)
   d413a:	f000 b803 	b.w	d4144 <_ZN9BH1750LibC1Ev>
   d413e:	bf00      	nop
   d4140:	2003e64c 	.word	0x2003e64c

000d4144 <_ZN9BH1750LibC1Ev>:

/**
 * Create instance without initialisation, need to call begin later
 */
BH1750Lib::BH1750Lib() {
}
   d4144:	4770      	bx	lr

000d4146 <_ZN9BH1750Lib9configureEh>:

/**
 * Setup BH1750 working mode
 */
void BH1750Lib::configure(uint8_t mode) {
    switch (mode) {
   d4146:	f1a1 0310 	sub.w	r3, r1, #16
   d414a:	b2db      	uxtb	r3, r3
   d414c:	2b13      	cmp	r3, #19
void BH1750Lib::configure(uint8_t mode) {
   d414e:	b510      	push	{r4, lr}
   d4150:	460c      	mov	r4, r1
   d4152:	d819      	bhi.n	d4188 <_ZN9BH1750Lib9configureEh+0x42>
   d4154:	2201      	movs	r2, #1
   d4156:	fa02 f303 	lsl.w	r3, r2, r3
   d415a:	f013 1f0b 	tst.w	r3, #720907	; 0xb000b
   d415e:	d013      	beq.n	d4188 <_ZN9BH1750Lib9configureEh+0x42>
        case BH1750LIB_MODE_CONTINUOUSHIGHRES2:
        case BH1750LIB_MODE_CONTINUOUSLOWRES:
        case BH1750LIB_MODE_ONETIMEHIGHRES:
        case BH1750LIB_MODE_ONETIMEHIGHRES2:
        case BH1750LIB_MODE_ONETIMELOWRES:
            Wire.beginTransmission(BH1750LIB_I2CADDR);
   d4160:	f000 fe92 	bl	d4e88 <_Z19__fetch_global_Wirev>
   d4164:	2123      	movs	r1, #35	; 0x23
   d4166:	f000 fd7f 	bl	d4c68 <_ZN7TwoWire17beginTransmissionEi>
            Wire.write(mode);
   d416a:	f000 fe8d 	bl	d4e88 <_Z19__fetch_global_Wirev>
   d416e:	6803      	ldr	r3, [r0, #0]
   d4170:	4621      	mov	r1, r4
   d4172:	689b      	ldr	r3, [r3, #8]
   d4174:	4798      	blx	r3
            Wire.endTransmission();
   d4176:	f000 fe87 	bl	d4e88 <_Z19__fetch_global_Wirev>
   d417a:	f000 fd7c 	bl	d4c76 <_ZN7TwoWire15endTransmissionEv>
            delay(10);
            break;
        default:
            break;
    }
}
   d417e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delay(10);
   d4182:	200a      	movs	r0, #10
   d4184:	f000 bad4 	b.w	d4730 <delay>
}
   d4188:	bd10      	pop	{r4, pc}

000d418a <_ZN9BH1750Lib5beginEh>:
void BH1750Lib::begin(uint8_t mode) {
   d418a:	b513      	push	{r0, r1, r4, lr}
   d418c:	4604      	mov	r4, r0
   d418e:	9101      	str	r1, [sp, #4]
    Wire.begin();
   d4190:	f000 fe7a 	bl	d4e88 <_Z19__fetch_global_Wirev>
   d4194:	f000 fd32 	bl	d4bfc <_ZN7TwoWire5beginEv>
    configure(mode);
   d4198:	9901      	ldr	r1, [sp, #4]
   d419a:	4620      	mov	r0, r4
}
   d419c:	b002      	add	sp, #8
   d419e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    configure(mode);
   d41a2:	f7ff bfd0 	b.w	d4146 <_ZN9BH1750Lib9configureEh>
	...

000d41a8 <_ZN9BH1750Lib10lightLevelEv>:

/**
 * Get the light level (in lux
 */
uint16_t BH1750Lib::lightLevel() {
   d41a8:	b510      	push	{r4, lr}
    uint16_t level;
    
    Wire.beginTransmission(BH1750LIB_I2CADDR);
   d41aa:	f000 fe6d 	bl	d4e88 <_Z19__fetch_global_Wirev>
   d41ae:	2123      	movs	r1, #35	; 0x23
   d41b0:	f000 fd5a 	bl	d4c68 <_ZN7TwoWire17beginTransmissionEi>
    Wire.requestFrom(BH1750LIB_I2CADDR, 2);
   d41b4:	f000 fe68 	bl	d4e88 <_Z19__fetch_global_Wirev>
   d41b8:	2202      	movs	r2, #2
   d41ba:	2123      	movs	r1, #35	; 0x23
   d41bc:	f000 fd4d 	bl	d4c5a <_ZN7TwoWire11requestFromEhj>
    level = Wire.read();
   d41c0:	f000 fe62 	bl	d4e88 <_Z19__fetch_global_Wirev>
   d41c4:	6803      	ldr	r3, [r0, #0]
   d41c6:	695b      	ldr	r3, [r3, #20]
   d41c8:	4798      	blx	r3
   d41ca:	b284      	uxth	r4, r0
    level <<= 8;
    level |= Wire.read();
   d41cc:	f000 fe5c 	bl	d4e88 <_Z19__fetch_global_Wirev>
   d41d0:	6803      	ldr	r3, [r0, #0]
   d41d2:	695b      	ldr	r3, [r3, #20]
   d41d4:	4798      	blx	r3
   d41d6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d41da:	b204      	sxth	r4, r0
    Wire.endTransmission();
   d41dc:	f000 fe54 	bl	d4e88 <_Z19__fetch_global_Wirev>
   d41e0:	f000 fd49 	bl	d4c76 <_ZN7TwoWire15endTransmissionEv>
    
    level = level/1.2; // convert to lux
   d41e4:	b2a0      	uxth	r0, r4
   d41e6:	f000 ffd3 	bl	d5190 <__aeabi_i2d>
   d41ea:	4b04      	ldr	r3, [pc, #16]	; (d41fc <_ZN9BH1750Lib10lightLevelEv+0x54>)
   d41ec:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d41f0:	f001 f962 	bl	d54b8 <__aeabi_ddiv>
   d41f4:	f001 fa48 	bl	d5688 <__aeabi_d2uiz>
    return level;
}
   d41f8:	b280      	uxth	r0, r0
   d41fa:	bd10      	pop	{r4, pc}
   d41fc:	3ff33333 	.word	0x3ff33333

000d4200 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4200:	b508      	push	{r3, lr}
   d4202:	4b02      	ldr	r3, [pc, #8]	; (d420c <netdb_freeaddrinfo+0xc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	689b      	ldr	r3, [r3, #8]
   d4208:	9301      	str	r3, [sp, #4]
   d420a:	bd08      	pop	{r3, pc}
   d420c:	00030268 	.word	0x00030268

000d4210 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4210:	b508      	push	{r3, lr}
   d4212:	4b02      	ldr	r3, [pc, #8]	; (d421c <netdb_getaddrinfo+0xc>)
   d4214:	681b      	ldr	r3, [r3, #0]
   d4216:	68db      	ldr	r3, [r3, #12]
   d4218:	9301      	str	r3, [sp, #4]
   d421a:	bd08      	pop	{r3, pc}
   d421c:	00030268 	.word	0x00030268

000d4220 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4220:	b508      	push	{r3, lr}
   d4222:	4b02      	ldr	r3, [pc, #8]	; (d422c <HAL_RNG_GetRandomNumber+0xc>)
   d4224:	681b      	ldr	r3, [r3, #0]
   d4226:	685b      	ldr	r3, [r3, #4]
   d4228:	9301      	str	r3, [sp, #4]
   d422a:	bd08      	pop	{r3, pc}
   d422c:	00030218 	.word	0x00030218

000d4230 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4230:	b508      	push	{r3, lr}
   d4232:	4b02      	ldr	r3, [pc, #8]	; (d423c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	695b      	ldr	r3, [r3, #20]
   d4238:	9301      	str	r3, [sp, #4]
   d423a:	bd08      	pop	{r3, pc}
   d423c:	00030218 	.word	0x00030218

000d4240 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4240:	b508      	push	{r3, lr}
   d4242:	4b02      	ldr	r3, [pc, #8]	; (d424c <os_mutex_recursive_create+0xc>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4248:	9301      	str	r3, [sp, #4]
   d424a:	bd08      	pop	{r3, pc}
   d424c:	00030248 	.word	0x00030248

000d4250 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4250:	b508      	push	{r3, lr}
   d4252:	4b02      	ldr	r3, [pc, #8]	; (d425c <os_mutex_recursive_destroy+0xc>)
   d4254:	681b      	ldr	r3, [r3, #0]
   d4256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4258:	9301      	str	r3, [sp, #4]
   d425a:	bd08      	pop	{r3, pc}
   d425c:	00030248 	.word	0x00030248

000d4260 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4260:	b508      	push	{r3, lr}
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <inet_inet_ntop+0xc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	695b      	ldr	r3, [r3, #20]
   d4268:	9301      	str	r3, [sp, #4]
   d426a:	bd08      	pop	{r3, pc}
   d426c:	00030264 	.word	0x00030264

000d4270 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <hal_usart_init+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	681b      	ldr	r3, [r3, #0]
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	0003023c 	.word	0x0003023c

000d4280 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <hal_usart_write+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	68db      	ldr	r3, [r3, #12]
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	0003023c 	.word	0x0003023c

000d4290 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <hal_usart_available+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	691b      	ldr	r3, [r3, #16]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	0003023c 	.word	0x0003023c

000d42a0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <hal_usart_read+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	695b      	ldr	r3, [r3, #20]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	0003023c 	.word	0x0003023c

000d42b0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <hal_usart_peek+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	699b      	ldr	r3, [r3, #24]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	0003023c 	.word	0x0003023c

000d42c0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <hal_usart_flush+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	69db      	ldr	r3, [r3, #28]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	0003023c 	.word	0x0003023c

000d42d0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <hal_usart_available_data_for_write+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	0003023c 	.word	0x0003023c

000d42e0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <hal_i2c_begin+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	68db      	ldr	r3, [r3, #12]
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	00030228 	.word	0x00030228

000d42f0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <hal_i2c_begin_transmission+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	699b      	ldr	r3, [r3, #24]
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	00030228 	.word	0x00030228

000d4300 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <hal_i2c_end_transmission+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	69db      	ldr	r3, [r3, #28]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	00030228 	.word	0x00030228

000d4310 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <hal_i2c_write+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	6a1b      	ldr	r3, [r3, #32]
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	00030228 	.word	0x00030228

000d4320 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <hal_i2c_available+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	00030228 	.word	0x00030228

000d4330 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <hal_i2c_read+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	00030228 	.word	0x00030228

000d4340 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <hal_i2c_peek+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	00030228 	.word	0x00030228

000d4350 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <hal_i2c_flush+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	00030228 	.word	0x00030228

000d4360 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <hal_i2c_init+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	00030228 	.word	0x00030228

000d4370 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <hal_i2c_request_ex+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	00030228 	.word	0x00030228

000d4380 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_USB_USART_Init+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	681b      	ldr	r3, [r3, #0]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003024c 	.word	0x0003024c

000d4390 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_USB_USART_Begin+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	685b      	ldr	r3, [r3, #4]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003024c 	.word	0x0003024c

000d43a0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_USB_USART_Available_Data+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	691b      	ldr	r3, [r3, #16]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	0003024c 	.word	0x0003024c

000d43b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	695b      	ldr	r3, [r3, #20]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	0003024c 	.word	0x0003024c

000d43c0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_USB_USART_Receive_Data+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	699b      	ldr	r3, [r3, #24]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	0003024c 	.word	0x0003024c

000d43d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <HAL_USB_USART_Send_Data+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	69db      	ldr	r3, [r3, #28]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	0003024c 	.word	0x0003024c

000d43e0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <HAL_USB_USART_Flush_Data+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	6a1b      	ldr	r3, [r3, #32]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	0003024c 	.word	0x0003024c

000d43f0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <set_system_mode+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	685b      	ldr	r3, [r3, #4]
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030220 	.word	0x00030220

000d4400 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <system_delay_ms+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	695b      	ldr	r3, [r3, #20]
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030220 	.word	0x00030220

000d4410 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b03      	ldr	r3, [pc, #12]	; (d4420 <system_ctrl_set_app_request_handler+0x10>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d441a:	9301      	str	r3, [sp, #4]
   d441c:	bd08      	pop	{r3, pc}
   d441e:	0000      	.short	0x0000
   d4420:	00030220 	.word	0x00030220

000d4424 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b03      	ldr	r3, [pc, #12]	; (d4434 <system_ctrl_set_result+0x10>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d442e:	9301      	str	r3, [sp, #4]
   d4430:	bd08      	pop	{r3, pc}
   d4432:	0000      	.short	0x0000
   d4434:	00030220 	.word	0x00030220

000d4438 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <network_connect+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	685b      	ldr	r3, [r3, #4]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030240 	.word	0x00030240

000d4448 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <network_connecting+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	689b      	ldr	r3, [r3, #8]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030240 	.word	0x00030240

000d4458 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <network_disconnect+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	68db      	ldr	r3, [r3, #12]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030240 	.word	0x00030240

000d4468 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <network_ready+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	691b      	ldr	r3, [r3, #16]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030240 	.word	0x00030240

000d4478 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <network_on+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	695b      	ldr	r3, [r3, #20]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030240 	.word	0x00030240

000d4488 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <network_off+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	699b      	ldr	r3, [r3, #24]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030240 	.word	0x00030240

000d4498 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <network_listen+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	69db      	ldr	r3, [r3, #28]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030240 	.word	0x00030240

000d44a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <network_listening+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6a1b      	ldr	r3, [r3, #32]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030240 	.word	0x00030240

000d44b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <network_set_listen_timeout+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030240 	.word	0x00030240

000d44c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <network_get_listen_timeout+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030240 	.word	0x00030240

000d44d8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <network_is_on+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030240 	.word	0x00030240

000d44e8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <network_is_off+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030240 	.word	0x00030240

000d44f8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <spark_variable+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	681b      	ldr	r3, [r3, #0]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030244 	.word	0x00030244

000d4508 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <spark_set_random_seed_from_cloud_handler+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030244 	.word	0x00030244

000d4518 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <malloc+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	681b      	ldr	r3, [r3, #0]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	0003021c 	.word	0x0003021c

000d4528 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <free+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	685b      	ldr	r3, [r3, #4]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	0003021c 	.word	0x0003021c

000d4538 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <newlib_impure_ptr_callback+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	0003021c 	.word	0x0003021c

000d4548 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4548:	2200      	movs	r2, #0
   d454a:	6840      	ldr	r0, [r0, #4]
   d454c:	4611      	mov	r1, r2
   d454e:	f7ff bfab 	b.w	d44a8 <network_listening>

000d4552 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4552:	2200      	movs	r2, #0
   d4554:	6840      	ldr	r0, [r0, #4]
   d4556:	4611      	mov	r1, r2
   d4558:	f7ff bfb6 	b.w	d44c8 <network_get_listen_timeout>

000d455c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d455c:	6840      	ldr	r0, [r0, #4]
   d455e:	2200      	movs	r2, #0
   d4560:	f7ff bfaa 	b.w	d44b8 <network_set_listen_timeout>

000d4564 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4564:	6840      	ldr	r0, [r0, #4]
   d4566:	2200      	movs	r2, #0
   d4568:	f081 0101 	eor.w	r1, r1, #1
   d456c:	f7ff bf94 	b.w	d4498 <network_listen>

000d4570 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4570:	2300      	movs	r3, #0
   d4572:	6840      	ldr	r0, [r0, #4]
   d4574:	461a      	mov	r2, r3
   d4576:	4619      	mov	r1, r3
   d4578:	f7ff bf86 	b.w	d4488 <network_off>

000d457c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d457c:	2300      	movs	r3, #0
   d457e:	6840      	ldr	r0, [r0, #4]
   d4580:	461a      	mov	r2, r3
   d4582:	4619      	mov	r1, r3
   d4584:	f7ff bf78 	b.w	d4478 <network_on>

000d4588 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4588:	2200      	movs	r2, #0
   d458a:	6840      	ldr	r0, [r0, #4]
   d458c:	4611      	mov	r1, r2
   d458e:	f7ff bf6b 	b.w	d4468 <network_ready>

000d4592 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4592:	2200      	movs	r2, #0
   d4594:	6840      	ldr	r0, [r0, #4]
   d4596:	4611      	mov	r1, r2
   d4598:	f7ff bf56 	b.w	d4448 <network_connecting>

000d459c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d459c:	6840      	ldr	r0, [r0, #4]
   d459e:	2200      	movs	r2, #0
   d45a0:	2102      	movs	r1, #2
   d45a2:	f7ff bf59 	b.w	d4458 <network_disconnect>

000d45a6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d45a6:	2300      	movs	r3, #0
   d45a8:	6840      	ldr	r0, [r0, #4]
   d45aa:	461a      	mov	r2, r3
   d45ac:	f7ff bf44 	b.w	d4438 <network_connect>

000d45b0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d45b0:	4b02      	ldr	r3, [pc, #8]	; (d45bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d45b2:	2203      	movs	r2, #3
   d45b4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d45b6:	4a02      	ldr	r2, [pc, #8]	; (d45c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d45b8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d45ba:	4770      	bx	lr
   d45bc:	2003e650 	.word	0x2003e650
   d45c0:	000d5794 	.word	0x000d5794

000d45c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d45c4:	b510      	push	{r4, lr}
   d45c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d45c8:	6800      	ldr	r0, [r0, #0]
   d45ca:	b118      	cbz	r0, d45d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d45cc:	f7ff ffac 	bl	d4528 <free>
            wakeupSource_ = nullptr;
   d45d0:	2300      	movs	r3, #0
   d45d2:	6023      	str	r3, [r4, #0]
        }
    }
   d45d4:	bd10      	pop	{r4, pc}

000d45d6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d45d6:	b510      	push	{r4, lr}
   d45d8:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d45da:	f7ff fff3 	bl	d45c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d45de:	4620      	mov	r0, r4
   d45e0:	bd10      	pop	{r4, pc}
	...

000d45e4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d45e4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d45e6:	4b09      	ldr	r3, [pc, #36]	; (d460c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d45e8:	4c09      	ldr	r4, [pc, #36]	; (d4610 <_GLOBAL__sub_I_System+0x2c>)
   d45ea:	2202      	movs	r2, #2
   d45ec:	2000      	movs	r0, #0
   d45ee:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d45f0:	4b08      	ldr	r3, [pc, #32]	; (d4614 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d45f2:	6020      	str	r0, [r4, #0]
   d45f4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d45f6:	71a0      	strb	r0, [r4, #6]
   d45f8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d45fa:	f7ff fef9 	bl	d43f0 <set_system_mode>
SystemClass System;
   d45fe:	4620      	mov	r0, r4
   d4600:	4a05      	ldr	r2, [pc, #20]	; (d4618 <_GLOBAL__sub_I_System+0x34>)
   d4602:	4906      	ldr	r1, [pc, #24]	; (d461c <_GLOBAL__sub_I_System+0x38>)
   d4604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4608:	f000 bc66 	b.w	d4ed8 <__aeabi_atexit>
   d460c:	2003e664 	.word	0x2003e664
   d4610:	2003e658 	.word	0x2003e658
   d4614:	ffff0000 	.word	0xffff0000
   d4618:	2003e644 	.word	0x2003e644
   d461c:	000d45d7 	.word	0x000d45d7

000d4620 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4620:	b510      	push	{r4, lr}
   d4622:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4624:	6800      	ldr	r0, [r0, #0]
   d4626:	b108      	cbz	r0, d462c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4628:	f7ff fe12 	bl	d4250 <os_mutex_recursive_destroy>
    }
   d462c:	4620      	mov	r0, r4
   d462e:	bd10      	pop	{r4, pc}

000d4630 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4630:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4632:	4c06      	ldr	r4, [pc, #24]	; (d464c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4634:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4636:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4638:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d463a:	f7ff fe01 	bl	d4240 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d463e:	4620      	mov	r0, r4
   d4640:	4a03      	ldr	r2, [pc, #12]	; (d4650 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4642:	4904      	ldr	r1, [pc, #16]	; (d4654 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4648:	f000 bc46 	b.w	d4ed8 <__aeabi_atexit>
   d464c:	2003e668 	.word	0x2003e668
   d4650:	2003e644 	.word	0x2003e644
   d4654:	000d4621 	.word	0x000d4621

000d4658 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d465a:	4606      	mov	r6, r0
   d465c:	460d      	mov	r5, r1
  size_t n = 0;
   d465e:	188f      	adds	r7, r1, r2
   d4660:	2400      	movs	r4, #0
  while (size--) {
   d4662:	42bd      	cmp	r5, r7
   d4664:	d00c      	beq.n	d4680 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4666:	6833      	ldr	r3, [r6, #0]
   d4668:	f815 1b01 	ldrb.w	r1, [r5], #1
   d466c:	689b      	ldr	r3, [r3, #8]
   d466e:	4630      	mov	r0, r6
   d4670:	4798      	blx	r3
     if (chunk>=0)
   d4672:	1e03      	subs	r3, r0, #0
   d4674:	db01      	blt.n	d467a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4676:	441c      	add	r4, r3
  while (size--) {
   d4678:	e7f3      	b.n	d4662 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d467a:	2c00      	cmp	r4, #0
   d467c:	bf08      	it	eq
   d467e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4680:	4620      	mov	r0, r4
   d4682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4684 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4684:	b513      	push	{r0, r1, r4, lr}
   d4686:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4688:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d468a:	b159      	cbz	r1, d46a4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d468c:	9101      	str	r1, [sp, #4]
   d468e:	f001 f863 	bl	d5758 <strlen>
   d4692:	6823      	ldr	r3, [r4, #0]
   d4694:	9901      	ldr	r1, [sp, #4]
   d4696:	68db      	ldr	r3, [r3, #12]
   d4698:	4602      	mov	r2, r0
   d469a:	4620      	mov	r0, r4
    }
   d469c:	b002      	add	sp, #8
   d469e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d46a2:	4718      	bx	r3
    }
   d46a4:	b002      	add	sp, #8
   d46a6:	bd10      	pop	{r4, pc}

000d46a8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d46a8:	b508      	push	{r3, lr}
  return write(str);
   d46aa:	f7ff ffeb 	bl	d4684 <_ZN5Print5writeEPKc>
}
   d46ae:	bd08      	pop	{r3, pc}

000d46b0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d46b0:	6803      	ldr	r3, [r0, #0]
   d46b2:	689b      	ldr	r3, [r3, #8]
   d46b4:	4718      	bx	r3

000d46b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d46b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d46b8:	210d      	movs	r1, #13
{
   d46ba:	4605      	mov	r5, r0
  size_t n = print('\r');
   d46bc:	f7ff fff8 	bl	d46b0 <_ZN5Print5printEc>
  n += print('\n');
   d46c0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d46c2:	4604      	mov	r4, r0
  n += print('\n');
   d46c4:	4628      	mov	r0, r5
   d46c6:	f7ff fff3 	bl	d46b0 <_ZN5Print5printEc>
  return n;
}
   d46ca:	4420      	add	r0, r4
   d46cc:	bd38      	pop	{r3, r4, r5, pc}

000d46ce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d46ce:	b530      	push	{r4, r5, lr}
   d46d0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d46d2:	2300      	movs	r3, #0
   d46d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d46d8:	2a01      	cmp	r2, #1
   d46da:	bf98      	it	ls
   d46dc:	220a      	movls	r2, #10
   d46de:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d46e0:	460d      	mov	r5, r1
   d46e2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d46e6:	fb01 5312 	mls	r3, r1, r2, r5
   d46ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d46ee:	2b09      	cmp	r3, #9
   d46f0:	bf94      	ite	ls
   d46f2:	3330      	addls	r3, #48	; 0x30
   d46f4:	3337      	addhi	r3, #55	; 0x37
   d46f6:	b2db      	uxtb	r3, r3
  } while(n);
   d46f8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d46fa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d46fe:	d9ef      	bls.n	d46e0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4700:	4621      	mov	r1, r4
   d4702:	f7ff ffbf 	bl	d4684 <_ZN5Print5writeEPKc>
}
   d4706:	b00b      	add	sp, #44	; 0x2c
   d4708:	bd30      	pop	{r4, r5, pc}
	...

000d470c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d470c:	4b01      	ldr	r3, [pc, #4]	; (d4714 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d470e:	4a02      	ldr	r2, [pc, #8]	; (d4718 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4710:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4712:	4770      	bx	lr
   d4714:	2003e66c 	.word	0x2003e66c
   d4718:	000d57c8 	.word	0x000d57c8

000d471c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d471c:	4b02      	ldr	r3, [pc, #8]	; (d4728 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d471e:	681a      	ldr	r2, [r3, #0]
   d4720:	4b02      	ldr	r3, [pc, #8]	; (d472c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4722:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4724:	4770      	bx	lr
   d4726:	bf00      	nop
   d4728:	2003e5dc 	.word	0x2003e5dc
   d472c:	2003e670 	.word	0x2003e670

000d4730 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4730:	2100      	movs	r1, #0
   d4732:	f7ff be65 	b.w	d4400 <system_delay_ms>

000d4736 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4736:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4738:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d473a:	4604      	mov	r4, r0
      if (_M_manager)
   d473c:	b113      	cbz	r3, d4744 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d473e:	2203      	movs	r2, #3
   d4740:	4601      	mov	r1, r0
   d4742:	4798      	blx	r3
    }
   d4744:	4620      	mov	r0, r4
   d4746:	bd10      	pop	{r4, pc}

000d4748 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4748:	b510      	push	{r4, lr}
   d474a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d474c:	f7ff fff3 	bl	d4736 <_ZNSt14_Function_baseD1Ev>
   d4750:	4620      	mov	r0, r4
   d4752:	bd10      	pop	{r4, pc}

000d4754 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4754:	4803      	ldr	r0, [pc, #12]	; (d4764 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4756:	4a04      	ldr	r2, [pc, #16]	; (d4768 <_GLOBAL__sub_I_RGB+0x14>)
   d4758:	4904      	ldr	r1, [pc, #16]	; (d476c <_GLOBAL__sub_I_RGB+0x18>)
   d475a:	2300      	movs	r3, #0
   d475c:	6083      	str	r3, [r0, #8]
   d475e:	f000 bbbb 	b.w	d4ed8 <__aeabi_atexit>
   d4762:	bf00      	nop
   d4764:	2003e674 	.word	0x2003e674
   d4768:	2003e644 	.word	0x2003e644
   d476c:	000d4749 	.word	0x000d4749

000d4770 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4770:	4b01      	ldr	r3, [pc, #4]	; (d4778 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4772:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4774:	4770      	bx	lr
   d4776:	bf00      	nop
   d4778:	2003e5e0 	.word	0x2003e5e0

000d477c <serialEventRun>:
{
   d477c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d477e:	4b0b      	ldr	r3, [pc, #44]	; (d47ac <serialEventRun+0x30>)
   d4780:	b143      	cbz	r3, d4794 <serialEventRun+0x18>
   d4782:	f000 f955 	bl	d4a30 <_Z16_fetch_usbserialv>
   d4786:	6803      	ldr	r3, [r0, #0]
   d4788:	691b      	ldr	r3, [r3, #16]
   d478a:	4798      	blx	r3
   d478c:	2800      	cmp	r0, #0
   d478e:	dd01      	ble.n	d4794 <serialEventRun+0x18>
        serialEvent();
   d4790:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4794:	4b06      	ldr	r3, [pc, #24]	; (d47b0 <serialEventRun+0x34>)
   d4796:	b143      	cbz	r3, d47aa <serialEventRun+0x2e>
   d4798:	f000 f9c8 	bl	d4b2c <_Z22__fetch_global_Serial1v>
   d479c:	6803      	ldr	r3, [r0, #0]
   d479e:	691b      	ldr	r3, [r3, #16]
   d47a0:	4798      	blx	r3
   d47a2:	2800      	cmp	r0, #0
   d47a4:	dd01      	ble.n	d47aa <serialEventRun+0x2e>
        serialEvent1();
   d47a6:	f3af 8000 	nop.w
}
   d47aa:	bd08      	pop	{r3, pc}
	...

000d47b4 <_post_loop>:
{
   d47b4:	b508      	push	{r3, lr}
	serialEventRun();
   d47b6:	f7ff ffe1 	bl	d477c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d47ba:	f7ff fd39 	bl	d4230 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d47be:	4b01      	ldr	r3, [pc, #4]	; (d47c4 <_post_loop+0x10>)
   d47c0:	6018      	str	r0, [r3, #0]
}
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	2003e7d4 	.word	0x2003e7d4

000d47c8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d47c8:	4802      	ldr	r0, [pc, #8]	; (d47d4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d47ca:	4a03      	ldr	r2, [pc, #12]	; (d47d8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d47cc:	4903      	ldr	r1, [pc, #12]	; (d47dc <_Z33system_initialize_user_backup_ramv+0x14>)
   d47ce:	1a12      	subs	r2, r2, r0
   d47d0:	f000 bf88 	b.w	d56e4 <memcpy>
   d47d4:	2003f400 	.word	0x2003f400
   d47d8:	2003f404 	.word	0x2003f404
   d47dc:	000d5930 	.word	0x000d5930

000d47e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d47e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d47e2:	2300      	movs	r3, #0
   d47e4:	9300      	str	r3, [sp, #0]
   d47e6:	461a      	mov	r2, r3
   d47e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d47ec:	f7ff fe1a 	bl	d4424 <system_ctrl_set_result>
}
   d47f0:	b003      	add	sp, #12
   d47f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d47f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d47f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d47fa:	8843      	ldrh	r3, [r0, #2]
   d47fc:	2b0a      	cmp	r3, #10
   d47fe:	d008      	beq.n	d4812 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4800:	2b50      	cmp	r3, #80	; 0x50
   d4802:	d10b      	bne.n	d481c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4804:	4b09      	ldr	r3, [pc, #36]	; (d482c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4806:	681b      	ldr	r3, [r3, #0]
   d4808:	b14b      	cbz	r3, d481e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d480a:	b003      	add	sp, #12
   d480c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4810:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4812:	f7ff ffe5 	bl	d47e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4816:	b003      	add	sp, #12
   d4818:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d481c:	2300      	movs	r3, #0
   d481e:	9300      	str	r3, [sp, #0]
   d4820:	461a      	mov	r2, r3
   d4822:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4826:	f7ff fdfd 	bl	d4424 <system_ctrl_set_result>
}
   d482a:	e7f4      	b.n	d4816 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d482c:	2003e688 	.word	0x2003e688

000d4830 <module_user_init_hook>:
{
   d4830:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4832:	4c12      	ldr	r4, [pc, #72]	; (d487c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4834:	4812      	ldr	r0, [pc, #72]	; (d4880 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4836:	4d13      	ldr	r5, [pc, #76]	; (d4884 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4838:	2100      	movs	r1, #0
   d483a:	f7ff fe7d 	bl	d4538 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d483e:	6823      	ldr	r3, [r4, #0]
   d4840:	42ab      	cmp	r3, r5
   d4842:	4b11      	ldr	r3, [pc, #68]	; (d4888 <module_user_init_hook+0x58>)
   d4844:	bf0c      	ite	eq
   d4846:	2201      	moveq	r2, #1
   d4848:	2200      	movne	r2, #0
   d484a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d484c:	d002      	beq.n	d4854 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d484e:	f7ff ffbb 	bl	d47c8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4852:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4854:	f7ff fce4 	bl	d4220 <HAL_RNG_GetRandomNumber>
   d4858:	4604      	mov	r4, r0
    srand(seed);
   d485a:	f000 ff59 	bl	d5710 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d485e:	4b0b      	ldr	r3, [pc, #44]	; (d488c <module_user_init_hook+0x5c>)
   d4860:	b113      	cbz	r3, d4868 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4862:	4620      	mov	r0, r4
   d4864:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4868:	2100      	movs	r1, #0
   d486a:	4808      	ldr	r0, [pc, #32]	; (d488c <module_user_init_hook+0x5c>)
   d486c:	f7ff fe4c 	bl	d4508 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4874:	4806      	ldr	r0, [pc, #24]	; (d4890 <module_user_init_hook+0x60>)
   d4876:	2100      	movs	r1, #0
   d4878:	f7ff bdca 	b.w	d4410 <system_ctrl_set_app_request_handler>
   d487c:	2003f400 	.word	0x2003f400
   d4880:	000d4771 	.word	0x000d4771
   d4884:	9a271c1e 	.word	0x9a271c1e
   d4888:	2003e684 	.word	0x2003e684
   d488c:	00000000 	.word	0x00000000
   d4890:	000d47f9 	.word	0x000d47f9

000d4894 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4894:	4770      	bx	lr

000d4896 <_ZN9IPAddressD0Ev>:
   d4896:	b510      	push	{r4, lr}
   d4898:	2118      	movs	r1, #24
   d489a:	4604      	mov	r4, r0
   d489c:	f000 fb21 	bl	d4ee2 <_ZdlPvj>
   d48a0:	4620      	mov	r0, r4
   d48a2:	bd10      	pop	{r4, pc}

000d48a4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d48a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d48a6:	7d03      	ldrb	r3, [r0, #20]
   d48a8:	2b06      	cmp	r3, #6
{
   d48aa:	b08d      	sub	sp, #52	; 0x34
   d48ac:	460e      	mov	r6, r1
   d48ae:	f100 0704 	add.w	r7, r0, #4
   d48b2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d48b6:	d012      	beq.n	d48de <_ZNK9IPAddress7printToER5Print+0x3a>
   d48b8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d48bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d48c0:	220a      	movs	r2, #10
   d48c2:	4630      	mov	r0, r6
   d48c4:	f7ff ff03 	bl	d46ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d48c8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d48ca:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d48cc:	d019      	beq.n	d4902 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d48ce:	2c00      	cmp	r4, #0
   d48d0:	d0f4      	beq.n	d48bc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d48d2:	212e      	movs	r1, #46	; 0x2e
   d48d4:	4630      	mov	r0, r6
   d48d6:	f7ff feeb 	bl	d46b0 <_ZN5Print5printEc>
   d48da:	4404      	add	r4, r0
   d48dc:	e7ee      	b.n	d48bc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d48de:	232f      	movs	r3, #47	; 0x2f
   d48e0:	466a      	mov	r2, sp
   d48e2:	4639      	mov	r1, r7
   d48e4:	200a      	movs	r0, #10
		buf[0] = 0;
   d48e6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d48ea:	f7ff fcb9 	bl	d4260 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d48ee:	4668      	mov	r0, sp
   d48f0:	f000 ff32 	bl	d5758 <strlen>
   d48f4:	6833      	ldr	r3, [r6, #0]
   d48f6:	4602      	mov	r2, r0
   d48f8:	68db      	ldr	r3, [r3, #12]
   d48fa:	4669      	mov	r1, sp
   d48fc:	4630      	mov	r0, r6
   d48fe:	4798      	blx	r3
   d4900:	4604      	mov	r4, r0
    }
    return n;
}
   d4902:	4620      	mov	r0, r4
   d4904:	b00d      	add	sp, #52	; 0x34
   d4906:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4908 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4908:	b510      	push	{r4, lr}
   d490a:	4b05      	ldr	r3, [pc, #20]	; (d4920 <_ZN9IPAddressC1Ev+0x18>)
   d490c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d490e:	2211      	movs	r2, #17
   d4910:	f840 3b04 	str.w	r3, [r0], #4
   d4914:	2100      	movs	r1, #0
   d4916:	f000 fef3 	bl	d5700 <memset>
}
   d491a:	4620      	mov	r0, r4
   d491c:	bd10      	pop	{r4, pc}
   d491e:	bf00      	nop
   d4920:	000d57f0 	.word	0x000d57f0

000d4924 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4924:	4603      	mov	r3, r0
   d4926:	4a07      	ldr	r2, [pc, #28]	; (d4944 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4928:	b510      	push	{r4, lr}
   d492a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d492e:	f101 0210 	add.w	r2, r1, #16
   d4932:	f851 4b04 	ldr.w	r4, [r1], #4
   d4936:	f843 4b04 	str.w	r4, [r3], #4
   d493a:	4291      	cmp	r1, r2
   d493c:	d1f9      	bne.n	d4932 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d493e:	780a      	ldrb	r2, [r1, #0]
   d4940:	701a      	strb	r2, [r3, #0]
}
   d4942:	bd10      	pop	{r4, pc}
   d4944:	000d57f0 	.word	0x000d57f0

000d4948 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4948:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d494a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d494e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4952:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4956:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d495a:	2304      	movs	r3, #4
   d495c:	6041      	str	r1, [r0, #4]
   d495e:	7503      	strb	r3, [r0, #20]
}
   d4960:	bd10      	pop	{r4, pc}

000d4962 <_ZN9IPAddressaSEPKh>:
{
   d4962:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4964:	78cb      	ldrb	r3, [r1, #3]
   d4966:	9300      	str	r3, [sp, #0]
   d4968:	788b      	ldrb	r3, [r1, #2]
   d496a:	784a      	ldrb	r2, [r1, #1]
   d496c:	7809      	ldrb	r1, [r1, #0]
   d496e:	f7ff ffeb 	bl	d4948 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4972:	b002      	add	sp, #8
   d4974:	bd10      	pop	{r4, pc}

000d4976 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4976:	7441      	strb	r1, [r0, #17]
}
   d4978:	4770      	bx	lr

000d497a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d497a:	4770      	bx	lr

000d497c <_ZN9USBSerial4readEv>:
{
   d497c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d497e:	2100      	movs	r1, #0
   d4980:	7c00      	ldrb	r0, [r0, #16]
   d4982:	f7ff fd1d 	bl	d43c0 <HAL_USB_USART_Receive_Data>
}
   d4986:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d498a:	bd08      	pop	{r3, pc}

000d498c <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d498c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d498e:	2101      	movs	r1, #1
   d4990:	7c00      	ldrb	r0, [r0, #16]
   d4992:	f7ff fd15 	bl	d43c0 <HAL_USB_USART_Receive_Data>
}
   d4996:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d499a:	bd08      	pop	{r3, pc}

000d499c <_ZN9USBSerial17availableForWriteEv>:
{
   d499c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d499e:	7c00      	ldrb	r0, [r0, #16]
   d49a0:	f7ff fd06 	bl	d43b0 <HAL_USB_USART_Available_Data_For_Write>
}
   d49a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d49a8:	bd08      	pop	{r3, pc}

000d49aa <_ZN9USBSerial9availableEv>:
{
   d49aa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d49ac:	7c00      	ldrb	r0, [r0, #16]
   d49ae:	f7ff fcf7 	bl	d43a0 <HAL_USB_USART_Available_Data>
}
   d49b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d49b6:	bd08      	pop	{r3, pc}

000d49b8 <_ZN9USBSerial5writeEh>:
{
   d49b8:	b513      	push	{r0, r1, r4, lr}
   d49ba:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d49bc:	7c00      	ldrb	r0, [r0, #16]
{
   d49be:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d49c0:	f7ff fcf6 	bl	d43b0 <HAL_USB_USART_Available_Data_For_Write>
   d49c4:	2800      	cmp	r0, #0
   d49c6:	9901      	ldr	r1, [sp, #4]
   d49c8:	dc01      	bgt.n	d49ce <_ZN9USBSerial5writeEh+0x16>
   d49ca:	7c60      	ldrb	r0, [r4, #17]
   d49cc:	b120      	cbz	r0, d49d8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d49ce:	7c20      	ldrb	r0, [r4, #16]
   d49d0:	f7ff fcfe 	bl	d43d0 <HAL_USB_USART_Send_Data>
   d49d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d49d8:	b002      	add	sp, #8
   d49da:	bd10      	pop	{r4, pc}

000d49dc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d49dc:	7c00      	ldrb	r0, [r0, #16]
   d49de:	f7ff bcff 	b.w	d43e0 <HAL_USB_USART_Flush_Data>

000d49e2 <_ZN9USBSerialD0Ev>:
   d49e2:	b510      	push	{r4, lr}
   d49e4:	2114      	movs	r1, #20
   d49e6:	4604      	mov	r4, r0
   d49e8:	f000 fa7b 	bl	d4ee2 <_ZdlPvj>
   d49ec:	4620      	mov	r0, r4
   d49ee:	bd10      	pop	{r4, pc}

000d49f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d49f0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d49f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d49f6:	4604      	mov	r4, r0
   d49f8:	4608      	mov	r0, r1
   d49fa:	2100      	movs	r1, #0
   d49fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4a00:	4b04      	ldr	r3, [pc, #16]	; (d4a14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4a02:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4a04:	2301      	movs	r3, #1
  _serial = serial;
   d4a06:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4a08:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4a0a:	4611      	mov	r1, r2
   d4a0c:	f7ff fcb8 	bl	d4380 <HAL_USB_USART_Init>
}
   d4a10:	4620      	mov	r0, r4
   d4a12:	bd10      	pop	{r4, pc}
   d4a14:	000d5804 	.word	0x000d5804

000d4a18 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4a18:	7c00      	ldrb	r0, [r0, #16]
   d4a1a:	2200      	movs	r2, #0
   d4a1c:	f7ff bcb8 	b.w	d4390 <HAL_USB_USART_Begin>

000d4a20 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4a20:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4a22:	2214      	movs	r2, #20
{
   d4a24:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4a26:	2100      	movs	r1, #0
   d4a28:	f000 fe6a 	bl	d5700 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4a2c:	4620      	mov	r0, r4
   d4a2e:	bd10      	pop	{r4, pc}

000d4a30 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4a30:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a32:	4c10      	ldr	r4, [pc, #64]	; (d4a74 <_Z16_fetch_usbserialv+0x44>)
{
   d4a34:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4a36:	a803      	add	r0, sp, #12
   d4a38:	f7ff fff2 	bl	d4a20 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a3c:	7821      	ldrb	r1, [r4, #0]
   d4a3e:	f3bf 8f5b 	dmb	ish
   d4a42:	f011 0101 	ands.w	r1, r1, #1
   d4a46:	d111      	bne.n	d4a6c <_Z16_fetch_usbserialv+0x3c>
   d4a48:	4620      	mov	r0, r4
   d4a4a:	9101      	str	r1, [sp, #4]
   d4a4c:	f7ff fb25 	bl	d409a <__cxa_guard_acquire>
   d4a50:	9901      	ldr	r1, [sp, #4]
   d4a52:	b158      	cbz	r0, d4a6c <_Z16_fetch_usbserialv+0x3c>
   d4a54:	aa03      	add	r2, sp, #12
   d4a56:	4808      	ldr	r0, [pc, #32]	; (d4a78 <_Z16_fetch_usbserialv+0x48>)
   d4a58:	f7ff ffca 	bl	d49f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4a5c:	4620      	mov	r0, r4
   d4a5e:	f7ff fb21 	bl	d40a4 <__cxa_guard_release>
   d4a62:	4a06      	ldr	r2, [pc, #24]	; (d4a7c <_Z16_fetch_usbserialv+0x4c>)
   d4a64:	4906      	ldr	r1, [pc, #24]	; (d4a80 <_Z16_fetch_usbserialv+0x50>)
   d4a66:	4804      	ldr	r0, [pc, #16]	; (d4a78 <_Z16_fetch_usbserialv+0x48>)
   d4a68:	f000 fa36 	bl	d4ed8 <__aeabi_atexit>
	return _usbserial;
}
   d4a6c:	4802      	ldr	r0, [pc, #8]	; (d4a78 <_Z16_fetch_usbserialv+0x48>)
   d4a6e:	b008      	add	sp, #32
   d4a70:	bd10      	pop	{r4, pc}
   d4a72:	bf00      	nop
   d4a74:	2003e68c 	.word	0x2003e68c
   d4a78:	2003e690 	.word	0x2003e690
   d4a7c:	2003e644 	.word	0x2003e644
   d4a80:	000d497b 	.word	0x000d497b

000d4a84 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d4a84:	4770      	bx	lr

000d4a86 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4a86:	7441      	strb	r1, [r0, #17]
}
   d4a88:	4770      	bx	lr

000d4a8a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d4a8a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d4a8c:	7c00      	ldrb	r0, [r0, #16]
   d4a8e:	f7ff fc1f 	bl	d42d0 <hal_usart_available_data_for_write>
}
   d4a92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4a96:	bd08      	pop	{r3, pc}

000d4a98 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4a98:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d4a9a:	7c00      	ldrb	r0, [r0, #16]
   d4a9c:	f7ff fbf8 	bl	d4290 <hal_usart_available>
}
   d4aa0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4aa4:	bd08      	pop	{r3, pc}

000d4aa6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4aa6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d4aa8:	7c00      	ldrb	r0, [r0, #16]
   d4aaa:	f7ff fc01 	bl	d42b0 <hal_usart_peek>
}
   d4aae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4ab2:	bd08      	pop	{r3, pc}

000d4ab4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4ab4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d4ab6:	7c00      	ldrb	r0, [r0, #16]
   d4ab8:	f7ff fbf2 	bl	d42a0 <hal_usart_read>
}
   d4abc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4ac0:	bd08      	pop	{r3, pc}

000d4ac2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d4ac2:	7c00      	ldrb	r0, [r0, #16]
   d4ac4:	f7ff bbfc 	b.w	d42c0 <hal_usart_flush>

000d4ac8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4aca:	7c45      	ldrb	r5, [r0, #17]
{
   d4acc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4ace:	b12d      	cbz	r5, d4adc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d4ad0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4ad2:	b003      	add	sp, #12
   d4ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d4ad8:	f7ff bbd2 	b.w	d4280 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4adc:	7c00      	ldrb	r0, [r0, #16]
   d4ade:	9101      	str	r1, [sp, #4]
   d4ae0:	f7ff fbf6 	bl	d42d0 <hal_usart_available_data_for_write>
   d4ae4:	2800      	cmp	r0, #0
   d4ae6:	9901      	ldr	r1, [sp, #4]
   d4ae8:	dcf2      	bgt.n	d4ad0 <_ZN11USARTSerial5writeEh+0x8>
}
   d4aea:	4628      	mov	r0, r5
   d4aec:	b003      	add	sp, #12
   d4aee:	bd30      	pop	{r4, r5, pc}

000d4af0 <_ZN11USARTSerialD0Ev>:
   d4af0:	b510      	push	{r4, lr}
   d4af2:	2114      	movs	r1, #20
   d4af4:	4604      	mov	r4, r0
   d4af6:	f000 f9f4 	bl	d4ee2 <_ZdlPvj>
   d4afa:	4620      	mov	r0, r4
   d4afc:	bd10      	pop	{r4, pc}
	...

000d4b00 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4b00:	b510      	push	{r4, lr}
   d4b02:	f04f 0c00 	mov.w	ip, #0
   d4b06:	4604      	mov	r4, r0
   d4b08:	4608      	mov	r0, r1
   d4b0a:	4611      	mov	r1, r2
   d4b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4b10:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4b14:	4a04      	ldr	r2, [pc, #16]	; (d4b28 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d4b16:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d4b18:	2201      	movs	r2, #1
  _serial = serial;
   d4b1a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4b1c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4b1e:	461a      	mov	r2, r3
   d4b20:	f7ff fba6 	bl	d4270 <hal_usart_init>
}
   d4b24:	4620      	mov	r0, r4
   d4b26:	bd10      	pop	{r4, pc}
   d4b28:	000d5834 	.word	0x000d5834

000d4b2c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4b2c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4b2e:	4c0e      	ldr	r4, [pc, #56]	; (d4b68 <_Z22__fetch_global_Serial1v+0x3c>)
   d4b30:	7821      	ldrb	r1, [r4, #0]
   d4b32:	f3bf 8f5b 	dmb	ish
   d4b36:	f011 0101 	ands.w	r1, r1, #1
   d4b3a:	d112      	bne.n	d4b62 <_Z22__fetch_global_Serial1v+0x36>
   d4b3c:	4620      	mov	r0, r4
   d4b3e:	9101      	str	r1, [sp, #4]
   d4b40:	f7ff faab 	bl	d409a <__cxa_guard_acquire>
   d4b44:	9901      	ldr	r1, [sp, #4]
   d4b46:	b160      	cbz	r0, d4b62 <_Z22__fetch_global_Serial1v+0x36>
   d4b48:	4a08      	ldr	r2, [pc, #32]	; (d4b6c <_Z22__fetch_global_Serial1v+0x40>)
   d4b4a:	4b09      	ldr	r3, [pc, #36]	; (d4b70 <_Z22__fetch_global_Serial1v+0x44>)
   d4b4c:	4809      	ldr	r0, [pc, #36]	; (d4b74 <_Z22__fetch_global_Serial1v+0x48>)
   d4b4e:	f7ff ffd7 	bl	d4b00 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4b52:	4620      	mov	r0, r4
   d4b54:	f7ff faa6 	bl	d40a4 <__cxa_guard_release>
   d4b58:	4a07      	ldr	r2, [pc, #28]	; (d4b78 <_Z22__fetch_global_Serial1v+0x4c>)
   d4b5a:	4908      	ldr	r1, [pc, #32]	; (d4b7c <_Z22__fetch_global_Serial1v+0x50>)
   d4b5c:	4805      	ldr	r0, [pc, #20]	; (d4b74 <_Z22__fetch_global_Serial1v+0x48>)
   d4b5e:	f000 f9bb 	bl	d4ed8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4b62:	4804      	ldr	r0, [pc, #16]	; (d4b74 <_Z22__fetch_global_Serial1v+0x48>)
   d4b64:	b002      	add	sp, #8
   d4b66:	bd10      	pop	{r4, pc}
   d4b68:	2003e6a4 	.word	0x2003e6a4
   d4b6c:	2003e6a8 	.word	0x2003e6a8
   d4b70:	2003e72c 	.word	0x2003e72c
   d4b74:	2003e7b0 	.word	0x2003e7b0
   d4b78:	2003e644 	.word	0x2003e644
   d4b7c:	000d4a85 	.word	0x000d4a85

000d4b80 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4b80:	4770      	bx	lr

000d4b82 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b84:	4606      	mov	r6, r0
   d4b86:	4615      	mov	r5, r2
   d4b88:	460c      	mov	r4, r1
   d4b8a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4b8c:	42bc      	cmp	r4, r7
   d4b8e:	d006      	beq.n	d4b9e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4b90:	6833      	ldr	r3, [r6, #0]
   d4b92:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4b96:	689b      	ldr	r3, [r3, #8]
   d4b98:	4630      	mov	r0, r6
   d4b9a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4b9c:	e7f6      	b.n	d4b8c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4b9e:	4628      	mov	r0, r5
   d4ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ba2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4ba2:	7c00      	ldrb	r0, [r0, #16]
   d4ba4:	2200      	movs	r2, #0
   d4ba6:	f7ff bbb3 	b.w	d4310 <hal_i2c_write>

000d4baa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4baa:	7c00      	ldrb	r0, [r0, #16]
   d4bac:	2100      	movs	r1, #0
   d4bae:	f7ff bbb7 	b.w	d4320 <hal_i2c_available>

000d4bb2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4bb2:	7c00      	ldrb	r0, [r0, #16]
   d4bb4:	2100      	movs	r1, #0
   d4bb6:	f7ff bbbb 	b.w	d4330 <hal_i2c_read>

000d4bba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4bba:	7c00      	ldrb	r0, [r0, #16]
   d4bbc:	2100      	movs	r1, #0
   d4bbe:	f7ff bbbf 	b.w	d4340 <hal_i2c_peek>

000d4bc2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4bc2:	7c00      	ldrb	r0, [r0, #16]
   d4bc4:	2100      	movs	r1, #0
   d4bc6:	f7ff bbc3 	b.w	d4350 <hal_i2c_flush>

000d4bca <_ZN7TwoWireD0Ev>:
   d4bca:	b510      	push	{r4, lr}
   d4bcc:	2114      	movs	r1, #20
   d4bce:	4604      	mov	r4, r0
   d4bd0:	f000 f987 	bl	d4ee2 <_ZdlPvj>
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	bd10      	pop	{r4, pc}

000d4bd8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4bd8:	b510      	push	{r4, lr}
   d4bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4bde:	4604      	mov	r4, r0
   d4be0:	4608      	mov	r0, r1
   d4be2:	2100      	movs	r1, #0
   d4be4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4be8:	4b03      	ldr	r3, [pc, #12]	; (d4bf8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4bea:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4bec:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4bee:	4611      	mov	r1, r2
   d4bf0:	f7ff fbb6 	bl	d4360 <hal_i2c_init>
}
   d4bf4:	4620      	mov	r0, r4
   d4bf6:	bd10      	pop	{r4, pc}
   d4bf8:	000d5864 	.word	0x000d5864

000d4bfc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4bfc:	2300      	movs	r3, #0
   d4bfe:	7c00      	ldrb	r0, [r0, #16]
   d4c00:	461a      	mov	r2, r3
   d4c02:	4619      	mov	r1, r3
   d4c04:	f7ff bb6c 	b.w	d42e0 <hal_i2c_begin>

000d4c08 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d4c08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d4c0a:	2200      	movs	r2, #0
   d4c0c:	2314      	movs	r3, #20
   d4c0e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d4c12:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d4c16:	780b      	ldrb	r3, [r1, #0]
   d4c18:	f88d 3008 	strb.w	r3, [sp, #8]
   d4c1c:	684b      	ldr	r3, [r1, #4]
   d4c1e:	9303      	str	r3, [sp, #12]
   d4c20:	68cb      	ldr	r3, [r1, #12]
   d4c22:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d4c24:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d4c26:	7a0b      	ldrb	r3, [r1, #8]
   d4c28:	9305      	str	r3, [sp, #20]
   d4c2a:	a901      	add	r1, sp, #4
   d4c2c:	f7ff fba0 	bl	d4370 <hal_i2c_request_ex>
}
   d4c30:	b007      	add	sp, #28
   d4c32:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c36 <_ZN7TwoWire11requestFromEhjh>:
{
   d4c36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4c38:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4c3a:	f88d 1000 	strb.w	r1, [sp]
   d4c3e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4c42:	9103      	str	r1, [sp, #12]
   d4c44:	bf18      	it	ne
   d4c46:	2301      	movne	r3, #1
   d4c48:	4669      	mov	r1, sp
    size_ = size;
   d4c4a:	9201      	str	r2, [sp, #4]
   d4c4c:	f88d 3008 	strb.w	r3, [sp, #8]
   d4c50:	f7ff ffda 	bl	d4c08 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4c54:	b005      	add	sp, #20
   d4c56:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c5a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d4c5a:	2301      	movs	r3, #1
   d4c5c:	f7ff bfeb 	b.w	d4c36 <_ZN7TwoWire11requestFromEhjh>

000d4c60 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d4c60:	7c00      	ldrb	r0, [r0, #16]
   d4c62:	2200      	movs	r2, #0
   d4c64:	f7ff bb44 	b.w	d42f0 <hal_i2c_begin_transmission>

000d4c68 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d4c68:	b2c9      	uxtb	r1, r1
   d4c6a:	f7ff bff9 	b.w	d4c60 <_ZN7TwoWire17beginTransmissionEh>

000d4c6e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d4c6e:	7c00      	ldrb	r0, [r0, #16]
   d4c70:	2200      	movs	r2, #0
   d4c72:	f7ff bb45 	b.w	d4300 <hal_i2c_end_transmission>

000d4c76 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d4c76:	2101      	movs	r1, #1
   d4c78:	f7ff bff9 	b.w	d4c6e <_ZN7TwoWire15endTransmissionEh>

000d4c7c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4c7c:	2200      	movs	r2, #0
   d4c7e:	6840      	ldr	r0, [r0, #4]
   d4c80:	4611      	mov	r1, r2
   d4c82:	f7ff bbf1 	b.w	d4468 <network_ready>

000d4c86 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c86:	2200      	movs	r2, #0
   d4c88:	6840      	ldr	r0, [r0, #4]
   d4c8a:	4611      	mov	r1, r2
   d4c8c:	f7ff bc0c 	b.w	d44a8 <network_listening>

000d4c90 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4c90:	2200      	movs	r2, #0
   d4c92:	6840      	ldr	r0, [r0, #4]
   d4c94:	4611      	mov	r1, r2
   d4c96:	f7ff bc17 	b.w	d44c8 <network_get_listen_timeout>

000d4c9a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4c9a:	6840      	ldr	r0, [r0, #4]
   d4c9c:	2200      	movs	r2, #0
   d4c9e:	f7ff bc0b 	b.w	d44b8 <network_set_listen_timeout>

000d4ca2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ca2:	6840      	ldr	r0, [r0, #4]
   d4ca4:	2200      	movs	r2, #0
   d4ca6:	f081 0101 	eor.w	r1, r1, #1
   d4caa:	f7ff bbf5 	b.w	d4498 <network_listen>

000d4cae <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4cae:	2300      	movs	r3, #0
   d4cb0:	6840      	ldr	r0, [r0, #4]
   d4cb2:	461a      	mov	r2, r3
   d4cb4:	4619      	mov	r1, r3
   d4cb6:	f7ff bbe7 	b.w	d4488 <network_off>

000d4cba <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4cba:	2300      	movs	r3, #0
   d4cbc:	6840      	ldr	r0, [r0, #4]
   d4cbe:	461a      	mov	r2, r3
   d4cc0:	4619      	mov	r1, r3
   d4cc2:	f7ff bbd9 	b.w	d4478 <network_on>

000d4cc6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4cc6:	2200      	movs	r2, #0
   d4cc8:	6840      	ldr	r0, [r0, #4]
   d4cca:	4611      	mov	r1, r2
   d4ccc:	f7ff bbbc 	b.w	d4448 <network_connecting>

000d4cd0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4cd0:	6840      	ldr	r0, [r0, #4]
   d4cd2:	2200      	movs	r2, #0
   d4cd4:	2102      	movs	r1, #2
   d4cd6:	f7ff bbbf 	b.w	d4458 <network_disconnect>

000d4cda <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4cda:	2300      	movs	r3, #0
   d4cdc:	6840      	ldr	r0, [r0, #4]
   d4cde:	461a      	mov	r2, r3
   d4ce0:	f7ff bbaa 	b.w	d4438 <network_connect>

000d4ce4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4ce4:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4ce6:	2204      	movs	r2, #4
   d4ce8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4cea:	4a02      	ldr	r2, [pc, #8]	; (d4cf4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4cec:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d4cee:	4770      	bx	lr
   d4cf0:	2003e7c4 	.word	0x2003e7c4
   d4cf4:	000d588c 	.word	0x000d588c

000d4cf8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4cf8:	2300      	movs	r3, #0
   d4cfa:	6840      	ldr	r0, [r0, #4]
   d4cfc:	461a      	mov	r2, r3
   d4cfe:	f7ff bb9b 	b.w	d4438 <network_connect>

000d4d02 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4d02:	6840      	ldr	r0, [r0, #4]
   d4d04:	2200      	movs	r2, #0
   d4d06:	2102      	movs	r1, #2
   d4d08:	f7ff bba6 	b.w	d4458 <network_disconnect>

000d4d0c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4d0c:	2200      	movs	r2, #0
   d4d0e:	6840      	ldr	r0, [r0, #4]
   d4d10:	4611      	mov	r1, r2
   d4d12:	f7ff bb99 	b.w	d4448 <network_connecting>

000d4d16 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4d16:	2200      	movs	r2, #0
   d4d18:	6840      	ldr	r0, [r0, #4]
   d4d1a:	4611      	mov	r1, r2
   d4d1c:	f7ff bba4 	b.w	d4468 <network_ready>

000d4d20 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4d20:	2300      	movs	r3, #0
   d4d22:	6840      	ldr	r0, [r0, #4]
   d4d24:	461a      	mov	r2, r3
   d4d26:	4619      	mov	r1, r3
   d4d28:	f7ff bba6 	b.w	d4478 <network_on>

000d4d2c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4d2c:	2300      	movs	r3, #0
   d4d2e:	6840      	ldr	r0, [r0, #4]
   d4d30:	461a      	mov	r2, r3
   d4d32:	4619      	mov	r1, r3
   d4d34:	f7ff bba8 	b.w	d4488 <network_off>

000d4d38 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4d38:	6840      	ldr	r0, [r0, #4]
   d4d3a:	2100      	movs	r1, #0
   d4d3c:	f7ff bbcc 	b.w	d44d8 <network_is_on>

000d4d40 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4d40:	6840      	ldr	r0, [r0, #4]
   d4d42:	2100      	movs	r1, #0
   d4d44:	f7ff bbd0 	b.w	d44e8 <network_is_off>

000d4d48 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4d48:	6840      	ldr	r0, [r0, #4]
   d4d4a:	2200      	movs	r2, #0
   d4d4c:	f081 0101 	eor.w	r1, r1, #1
   d4d50:	f7ff bba2 	b.w	d4498 <network_listen>

000d4d54 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4d54:	6840      	ldr	r0, [r0, #4]
   d4d56:	2200      	movs	r2, #0
   d4d58:	f7ff bbae 	b.w	d44b8 <network_set_listen_timeout>

000d4d5c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4d5c:	2200      	movs	r2, #0
   d4d5e:	6840      	ldr	r0, [r0, #4]
   d4d60:	4611      	mov	r1, r2
   d4d62:	f7ff bbb1 	b.w	d44c8 <network_get_listen_timeout>

000d4d66 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4d66:	2200      	movs	r2, #0
   d4d68:	6840      	ldr	r0, [r0, #4]
   d4d6a:	4611      	mov	r1, r2
   d4d6c:	f7ff bb9c 	b.w	d44a8 <network_listening>

000d4d70 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d74:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4d76:	b095      	sub	sp, #84	; 0x54
   d4d78:	4616      	mov	r6, r2
   d4d7a:	460d      	mov	r5, r1
   d4d7c:	4607      	mov	r7, r0
    IPAddress addr;
   d4d7e:	f7ff fdc3 	bl	d4908 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4d82:	4621      	mov	r1, r4
   d4d84:	2218      	movs	r2, #24
   d4d86:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4d88:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4d8a:	f000 fcb9 	bl	d5700 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4d8e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4d90:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4d94:	4621      	mov	r1, r4
   d4d96:	466b      	mov	r3, sp
   d4d98:	aa0c      	add	r2, sp, #48	; 0x30
   d4d9a:	4630      	mov	r0, r6
   d4d9c:	f7ff fa38 	bl	d4210 <netdb_getaddrinfo>
    if (!r) {
   d4da0:	4604      	mov	r4, r0
   d4da2:	2800      	cmp	r0, #0
   d4da4:	d146      	bne.n	d4e34 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4da6:	4602      	mov	r2, r0
   d4da8:	2101      	movs	r1, #1
   d4daa:	6868      	ldr	r0, [r5, #4]
   d4dac:	f7ff fb5c 	bl	d4468 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4db0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4db2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4db4:	4622      	mov	r2, r4
   d4db6:	6868      	ldr	r0, [r5, #4]
   d4db8:	f7ff fb56 	bl	d4468 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4dbc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4dbe:	4681      	mov	r9, r0
        bool ok = false;
   d4dc0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4dc2:	2e00      	cmp	r6, #0
   d4dc4:	d036      	beq.n	d4e34 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4dc6:	2900      	cmp	r1, #0
   d4dc8:	d134      	bne.n	d4e34 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4dca:	6873      	ldr	r3, [r6, #4]
   d4dcc:	2b02      	cmp	r3, #2
   d4dce:	d003      	beq.n	d4dd8 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4dd0:	2b0a      	cmp	r3, #10
   d4dd2:	d00b      	beq.n	d4dec <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4dd4:	69f6      	ldr	r6, [r6, #28]
   d4dd6:	e7f4      	b.n	d4dc2 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4dd8:	f1b8 0f00 	cmp.w	r8, #0
   d4ddc:	d004      	beq.n	d4de8 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4dde:	6971      	ldr	r1, [r6, #20]
   d4de0:	4638      	mov	r0, r7
   d4de2:	3104      	adds	r1, #4
   d4de4:	f7ff fdbd 	bl	d4962 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4de8:	4641      	mov	r1, r8
   d4dea:	e7f3      	b.n	d4dd4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4dec:	f1b9 0f00 	cmp.w	r9, #0
   d4df0:	d101      	bne.n	d4df6 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4df2:	4649      	mov	r1, r9
   d4df4:	e7ee      	b.n	d4dd4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4df6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4df8:	2210      	movs	r2, #16
   d4dfa:	a801      	add	r0, sp, #4
   d4dfc:	f000 fc80 	bl	d5700 <memset>
                    a.v = 6;
   d4e00:	2306      	movs	r3, #6
   d4e02:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e06:	ad01      	add	r5, sp, #4
   d4e08:	f104 0308 	add.w	r3, r4, #8
   d4e0c:	3418      	adds	r4, #24
   d4e0e:	6818      	ldr	r0, [r3, #0]
   d4e10:	6859      	ldr	r1, [r3, #4]
   d4e12:	462a      	mov	r2, r5
   d4e14:	c203      	stmia	r2!, {r0, r1}
   d4e16:	3308      	adds	r3, #8
   d4e18:	42a3      	cmp	r3, r4
   d4e1a:	4615      	mov	r5, r2
   d4e1c:	d1f7      	bne.n	d4e0e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4e1e:	a901      	add	r1, sp, #4
   d4e20:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4e22:	ad07      	add	r5, sp, #28
   d4e24:	f7ff fd7e 	bl	d4924 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e2a:	1d3c      	adds	r4, r7, #4
   d4e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e2e:	682b      	ldr	r3, [r5, #0]
   d4e30:	7023      	strb	r3, [r4, #0]
   d4e32:	e7de      	b.n	d4df2 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4e34:	9800      	ldr	r0, [sp, #0]
   d4e36:	f7ff f9e3 	bl	d4200 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4e3a:	4638      	mov	r0, r7
   d4e3c:	b015      	add	sp, #84	; 0x54
   d4e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4e44 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4e44:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4e46:	4a03      	ldr	r2, [pc, #12]	; (d4e54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4e48:	601a      	str	r2, [r3, #0]
   d4e4a:	2200      	movs	r2, #0
   d4e4c:	605a      	str	r2, [r3, #4]

} // spark
   d4e4e:	4770      	bx	lr
   d4e50:	2003e7cc 	.word	0x2003e7cc
   d4e54:	000d58c8 	.word	0x000d58c8

000d4e58 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d4e58:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d4e5a:	2300      	movs	r3, #0
   d4e5c:	2520      	movs	r5, #32
   d4e5e:	8043      	strh	r3, [r0, #2]
   d4e60:	2314      	movs	r3, #20
{
   d4e62:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d4e64:	8003      	strh	r3, [r0, #0]
   d4e66:	6085      	str	r5, [r0, #8]
   d4e68:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4e6a:	4906      	ldr	r1, [pc, #24]	; (d4e84 <_Z17acquireWireBufferv+0x2c>)
   d4e6c:	4628      	mov	r0, r5
   d4e6e:	f000 f83a 	bl	d4ee6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4e72:	4904      	ldr	r1, [pc, #16]	; (d4e84 <_Z17acquireWireBufferv+0x2c>)
	};
   d4e74:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4e76:	4628      	mov	r0, r5
   d4e78:	f000 f835 	bl	d4ee6 <_ZnajRKSt9nothrow_t>
	};
   d4e7c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d4e7e:	4620      	mov	r0, r4
   d4e80:	bd38      	pop	{r3, r4, r5, pc}
   d4e82:	bf00      	nop
   d4e84:	000d58fc 	.word	0x000d58fc

000d4e88 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d4e88:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4e8a:	4d0f      	ldr	r5, [pc, #60]	; (d4ec8 <_Z19__fetch_global_Wirev+0x40>)
   d4e8c:	7829      	ldrb	r1, [r5, #0]
   d4e8e:	f3bf 8f5b 	dmb	ish
   d4e92:	f011 0401 	ands.w	r4, r1, #1
{
   d4e96:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4e98:	d113      	bne.n	d4ec2 <_Z19__fetch_global_Wirev+0x3a>
   d4e9a:	4628      	mov	r0, r5
   d4e9c:	f7ff f8fd 	bl	d409a <__cxa_guard_acquire>
   d4ea0:	b178      	cbz	r0, d4ec2 <_Z19__fetch_global_Wirev+0x3a>
   d4ea2:	a801      	add	r0, sp, #4
   d4ea4:	f7ff ffd8 	bl	d4e58 <_Z17acquireWireBufferv>
   d4ea8:	aa01      	add	r2, sp, #4
   d4eaa:	4621      	mov	r1, r4
   d4eac:	4807      	ldr	r0, [pc, #28]	; (d4ecc <_Z19__fetch_global_Wirev+0x44>)
   d4eae:	f7ff fe93 	bl	d4bd8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d4eb2:	4628      	mov	r0, r5
   d4eb4:	f7ff f8f6 	bl	d40a4 <__cxa_guard_release>
   d4eb8:	4a05      	ldr	r2, [pc, #20]	; (d4ed0 <_Z19__fetch_global_Wirev+0x48>)
   d4eba:	4906      	ldr	r1, [pc, #24]	; (d4ed4 <_Z19__fetch_global_Wirev+0x4c>)
   d4ebc:	4803      	ldr	r0, [pc, #12]	; (d4ecc <_Z19__fetch_global_Wirev+0x44>)
   d4ebe:	f000 f80b 	bl	d4ed8 <__aeabi_atexit>
	return wire;
}
   d4ec2:	4802      	ldr	r0, [pc, #8]	; (d4ecc <_Z19__fetch_global_Wirev+0x44>)
   d4ec4:	b007      	add	sp, #28
   d4ec6:	bd30      	pop	{r4, r5, pc}
   d4ec8:	2003e7d8 	.word	0x2003e7d8
   d4ecc:	2003e7dc 	.word	0x2003e7dc
   d4ed0:	2003e644 	.word	0x2003e644
   d4ed4:	000d4b81 	.word	0x000d4b81

000d4ed8 <__aeabi_atexit>:
   d4ed8:	460b      	mov	r3, r1
   d4eda:	4601      	mov	r1, r0
   d4edc:	4618      	mov	r0, r3
   d4ede:	f000 bbf3 	b.w	d56c8 <__cxa_atexit>

000d4ee2 <_ZdlPvj>:
   d4ee2:	f7ff b8d8 	b.w	d4096 <_ZdlPv>

000d4ee6 <_ZnajRKSt9nothrow_t>:
   d4ee6:	f7ff b8d4 	b.w	d4092 <_Znaj>
	...

000d4eec <__aeabi_drsub>:
   d4eec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d4ef0:	e002      	b.n	d4ef8 <__adddf3>
   d4ef2:	bf00      	nop

000d4ef4 <__aeabi_dsub>:
   d4ef4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d4ef8 <__adddf3>:
   d4ef8:	b530      	push	{r4, r5, lr}
   d4efa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d4efe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d4f02:	ea94 0f05 	teq	r4, r5
   d4f06:	bf08      	it	eq
   d4f08:	ea90 0f02 	teqeq	r0, r2
   d4f0c:	bf1f      	itttt	ne
   d4f0e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d4f12:	ea55 0c02 	orrsne.w	ip, r5, r2
   d4f16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d4f1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d4f1e:	f000 80e2 	beq.w	d50e6 <__adddf3+0x1ee>
   d4f22:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d4f26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d4f2a:	bfb8      	it	lt
   d4f2c:	426d      	neglt	r5, r5
   d4f2e:	dd0c      	ble.n	d4f4a <__adddf3+0x52>
   d4f30:	442c      	add	r4, r5
   d4f32:	ea80 0202 	eor.w	r2, r0, r2
   d4f36:	ea81 0303 	eor.w	r3, r1, r3
   d4f3a:	ea82 0000 	eor.w	r0, r2, r0
   d4f3e:	ea83 0101 	eor.w	r1, r3, r1
   d4f42:	ea80 0202 	eor.w	r2, r0, r2
   d4f46:	ea81 0303 	eor.w	r3, r1, r3
   d4f4a:	2d36      	cmp	r5, #54	; 0x36
   d4f4c:	bf88      	it	hi
   d4f4e:	bd30      	pophi	{r4, r5, pc}
   d4f50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d4f54:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d4f58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d4f5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d4f60:	d002      	beq.n	d4f68 <__adddf3+0x70>
   d4f62:	4240      	negs	r0, r0
   d4f64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d4f68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d4f6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d4f70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d4f74:	d002      	beq.n	d4f7c <__adddf3+0x84>
   d4f76:	4252      	negs	r2, r2
   d4f78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d4f7c:	ea94 0f05 	teq	r4, r5
   d4f80:	f000 80a7 	beq.w	d50d2 <__adddf3+0x1da>
   d4f84:	f1a4 0401 	sub.w	r4, r4, #1
   d4f88:	f1d5 0e20 	rsbs	lr, r5, #32
   d4f8c:	db0d      	blt.n	d4faa <__adddf3+0xb2>
   d4f8e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d4f92:	fa22 f205 	lsr.w	r2, r2, r5
   d4f96:	1880      	adds	r0, r0, r2
   d4f98:	f141 0100 	adc.w	r1, r1, #0
   d4f9c:	fa03 f20e 	lsl.w	r2, r3, lr
   d4fa0:	1880      	adds	r0, r0, r2
   d4fa2:	fa43 f305 	asr.w	r3, r3, r5
   d4fa6:	4159      	adcs	r1, r3
   d4fa8:	e00e      	b.n	d4fc8 <__adddf3+0xd0>
   d4faa:	f1a5 0520 	sub.w	r5, r5, #32
   d4fae:	f10e 0e20 	add.w	lr, lr, #32
   d4fb2:	2a01      	cmp	r2, #1
   d4fb4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d4fb8:	bf28      	it	cs
   d4fba:	f04c 0c02 	orrcs.w	ip, ip, #2
   d4fbe:	fa43 f305 	asr.w	r3, r3, r5
   d4fc2:	18c0      	adds	r0, r0, r3
   d4fc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d4fc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d4fcc:	d507      	bpl.n	d4fde <__adddf3+0xe6>
   d4fce:	f04f 0e00 	mov.w	lr, #0
   d4fd2:	f1dc 0c00 	rsbs	ip, ip, #0
   d4fd6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d4fda:	eb6e 0101 	sbc.w	r1, lr, r1
   d4fde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d4fe2:	d31b      	bcc.n	d501c <__adddf3+0x124>
   d4fe4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d4fe8:	d30c      	bcc.n	d5004 <__adddf3+0x10c>
   d4fea:	0849      	lsrs	r1, r1, #1
   d4fec:	ea5f 0030 	movs.w	r0, r0, rrx
   d4ff0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d4ff4:	f104 0401 	add.w	r4, r4, #1
   d4ff8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d4ffc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5000:	f080 809a 	bcs.w	d5138 <__adddf3+0x240>
   d5004:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5008:	bf08      	it	eq
   d500a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d500e:	f150 0000 	adcs.w	r0, r0, #0
   d5012:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5016:	ea41 0105 	orr.w	r1, r1, r5
   d501a:	bd30      	pop	{r4, r5, pc}
   d501c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5020:	4140      	adcs	r0, r0
   d5022:	eb41 0101 	adc.w	r1, r1, r1
   d5026:	3c01      	subs	r4, #1
   d5028:	bf28      	it	cs
   d502a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d502e:	d2e9      	bcs.n	d5004 <__adddf3+0x10c>
   d5030:	f091 0f00 	teq	r1, #0
   d5034:	bf04      	itt	eq
   d5036:	4601      	moveq	r1, r0
   d5038:	2000      	moveq	r0, #0
   d503a:	fab1 f381 	clz	r3, r1
   d503e:	bf08      	it	eq
   d5040:	3320      	addeq	r3, #32
   d5042:	f1a3 030b 	sub.w	r3, r3, #11
   d5046:	f1b3 0220 	subs.w	r2, r3, #32
   d504a:	da0c      	bge.n	d5066 <__adddf3+0x16e>
   d504c:	320c      	adds	r2, #12
   d504e:	dd08      	ble.n	d5062 <__adddf3+0x16a>
   d5050:	f102 0c14 	add.w	ip, r2, #20
   d5054:	f1c2 020c 	rsb	r2, r2, #12
   d5058:	fa01 f00c 	lsl.w	r0, r1, ip
   d505c:	fa21 f102 	lsr.w	r1, r1, r2
   d5060:	e00c      	b.n	d507c <__adddf3+0x184>
   d5062:	f102 0214 	add.w	r2, r2, #20
   d5066:	bfd8      	it	le
   d5068:	f1c2 0c20 	rsble	ip, r2, #32
   d506c:	fa01 f102 	lsl.w	r1, r1, r2
   d5070:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5074:	bfdc      	itt	le
   d5076:	ea41 010c 	orrle.w	r1, r1, ip
   d507a:	4090      	lslle	r0, r2
   d507c:	1ae4      	subs	r4, r4, r3
   d507e:	bfa2      	ittt	ge
   d5080:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5084:	4329      	orrge	r1, r5
   d5086:	bd30      	popge	{r4, r5, pc}
   d5088:	ea6f 0404 	mvn.w	r4, r4
   d508c:	3c1f      	subs	r4, #31
   d508e:	da1c      	bge.n	d50ca <__adddf3+0x1d2>
   d5090:	340c      	adds	r4, #12
   d5092:	dc0e      	bgt.n	d50b2 <__adddf3+0x1ba>
   d5094:	f104 0414 	add.w	r4, r4, #20
   d5098:	f1c4 0220 	rsb	r2, r4, #32
   d509c:	fa20 f004 	lsr.w	r0, r0, r4
   d50a0:	fa01 f302 	lsl.w	r3, r1, r2
   d50a4:	ea40 0003 	orr.w	r0, r0, r3
   d50a8:	fa21 f304 	lsr.w	r3, r1, r4
   d50ac:	ea45 0103 	orr.w	r1, r5, r3
   d50b0:	bd30      	pop	{r4, r5, pc}
   d50b2:	f1c4 040c 	rsb	r4, r4, #12
   d50b6:	f1c4 0220 	rsb	r2, r4, #32
   d50ba:	fa20 f002 	lsr.w	r0, r0, r2
   d50be:	fa01 f304 	lsl.w	r3, r1, r4
   d50c2:	ea40 0003 	orr.w	r0, r0, r3
   d50c6:	4629      	mov	r1, r5
   d50c8:	bd30      	pop	{r4, r5, pc}
   d50ca:	fa21 f004 	lsr.w	r0, r1, r4
   d50ce:	4629      	mov	r1, r5
   d50d0:	bd30      	pop	{r4, r5, pc}
   d50d2:	f094 0f00 	teq	r4, #0
   d50d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d50da:	bf06      	itte	eq
   d50dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d50e0:	3401      	addeq	r4, #1
   d50e2:	3d01      	subne	r5, #1
   d50e4:	e74e      	b.n	d4f84 <__adddf3+0x8c>
   d50e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d50ea:	bf18      	it	ne
   d50ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d50f0:	d029      	beq.n	d5146 <__adddf3+0x24e>
   d50f2:	ea94 0f05 	teq	r4, r5
   d50f6:	bf08      	it	eq
   d50f8:	ea90 0f02 	teqeq	r0, r2
   d50fc:	d005      	beq.n	d510a <__adddf3+0x212>
   d50fe:	ea54 0c00 	orrs.w	ip, r4, r0
   d5102:	bf04      	itt	eq
   d5104:	4619      	moveq	r1, r3
   d5106:	4610      	moveq	r0, r2
   d5108:	bd30      	pop	{r4, r5, pc}
   d510a:	ea91 0f03 	teq	r1, r3
   d510e:	bf1e      	ittt	ne
   d5110:	2100      	movne	r1, #0
   d5112:	2000      	movne	r0, #0
   d5114:	bd30      	popne	{r4, r5, pc}
   d5116:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d511a:	d105      	bne.n	d5128 <__adddf3+0x230>
   d511c:	0040      	lsls	r0, r0, #1
   d511e:	4149      	adcs	r1, r1
   d5120:	bf28      	it	cs
   d5122:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5126:	bd30      	pop	{r4, r5, pc}
   d5128:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d512c:	bf3c      	itt	cc
   d512e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5132:	bd30      	popcc	{r4, r5, pc}
   d5134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5138:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d513c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5140:	f04f 0000 	mov.w	r0, #0
   d5144:	bd30      	pop	{r4, r5, pc}
   d5146:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d514a:	bf1a      	itte	ne
   d514c:	4619      	movne	r1, r3
   d514e:	4610      	movne	r0, r2
   d5150:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5154:	bf1c      	itt	ne
   d5156:	460b      	movne	r3, r1
   d5158:	4602      	movne	r2, r0
   d515a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d515e:	bf06      	itte	eq
   d5160:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5164:	ea91 0f03 	teqeq	r1, r3
   d5168:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d516c:	bd30      	pop	{r4, r5, pc}
   d516e:	bf00      	nop

000d5170 <__aeabi_ui2d>:
   d5170:	f090 0f00 	teq	r0, #0
   d5174:	bf04      	itt	eq
   d5176:	2100      	moveq	r1, #0
   d5178:	4770      	bxeq	lr
   d517a:	b530      	push	{r4, r5, lr}
   d517c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5180:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5184:	f04f 0500 	mov.w	r5, #0
   d5188:	f04f 0100 	mov.w	r1, #0
   d518c:	e750      	b.n	d5030 <__adddf3+0x138>
   d518e:	bf00      	nop

000d5190 <__aeabi_i2d>:
   d5190:	f090 0f00 	teq	r0, #0
   d5194:	bf04      	itt	eq
   d5196:	2100      	moveq	r1, #0
   d5198:	4770      	bxeq	lr
   d519a:	b530      	push	{r4, r5, lr}
   d519c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d51a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d51a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d51a8:	bf48      	it	mi
   d51aa:	4240      	negmi	r0, r0
   d51ac:	f04f 0100 	mov.w	r1, #0
   d51b0:	e73e      	b.n	d5030 <__adddf3+0x138>
   d51b2:	bf00      	nop

000d51b4 <__aeabi_f2d>:
   d51b4:	0042      	lsls	r2, r0, #1
   d51b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d51ba:	ea4f 0131 	mov.w	r1, r1, rrx
   d51be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d51c2:	bf1f      	itttt	ne
   d51c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d51c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d51cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d51d0:	4770      	bxne	lr
   d51d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d51d6:	bf08      	it	eq
   d51d8:	4770      	bxeq	lr
   d51da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d51de:	bf04      	itt	eq
   d51e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d51e4:	4770      	bxeq	lr
   d51e6:	b530      	push	{r4, r5, lr}
   d51e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d51ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d51f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d51f4:	e71c      	b.n	d5030 <__adddf3+0x138>
   d51f6:	bf00      	nop

000d51f8 <__aeabi_ul2d>:
   d51f8:	ea50 0201 	orrs.w	r2, r0, r1
   d51fc:	bf08      	it	eq
   d51fe:	4770      	bxeq	lr
   d5200:	b530      	push	{r4, r5, lr}
   d5202:	f04f 0500 	mov.w	r5, #0
   d5206:	e00a      	b.n	d521e <__aeabi_l2d+0x16>

000d5208 <__aeabi_l2d>:
   d5208:	ea50 0201 	orrs.w	r2, r0, r1
   d520c:	bf08      	it	eq
   d520e:	4770      	bxeq	lr
   d5210:	b530      	push	{r4, r5, lr}
   d5212:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5216:	d502      	bpl.n	d521e <__aeabi_l2d+0x16>
   d5218:	4240      	negs	r0, r0
   d521a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d521e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5222:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5226:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d522a:	f43f aed8 	beq.w	d4fde <__adddf3+0xe6>
   d522e:	f04f 0203 	mov.w	r2, #3
   d5232:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5236:	bf18      	it	ne
   d5238:	3203      	addne	r2, #3
   d523a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d523e:	bf18      	it	ne
   d5240:	3203      	addne	r2, #3
   d5242:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5246:	f1c2 0320 	rsb	r3, r2, #32
   d524a:	fa00 fc03 	lsl.w	ip, r0, r3
   d524e:	fa20 f002 	lsr.w	r0, r0, r2
   d5252:	fa01 fe03 	lsl.w	lr, r1, r3
   d5256:	ea40 000e 	orr.w	r0, r0, lr
   d525a:	fa21 f102 	lsr.w	r1, r1, r2
   d525e:	4414      	add	r4, r2
   d5260:	e6bd      	b.n	d4fde <__adddf3+0xe6>
   d5262:	bf00      	nop

000d5264 <__aeabi_dmul>:
   d5264:	b570      	push	{r4, r5, r6, lr}
   d5266:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d526a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d526e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5272:	bf1d      	ittte	ne
   d5274:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5278:	ea94 0f0c 	teqne	r4, ip
   d527c:	ea95 0f0c 	teqne	r5, ip
   d5280:	f000 f8de 	bleq	d5440 <__aeabi_dmul+0x1dc>
   d5284:	442c      	add	r4, r5
   d5286:	ea81 0603 	eor.w	r6, r1, r3
   d528a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d528e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5292:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5296:	bf18      	it	ne
   d5298:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d529c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d52a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d52a4:	d038      	beq.n	d5318 <__aeabi_dmul+0xb4>
   d52a6:	fba0 ce02 	umull	ip, lr, r0, r2
   d52aa:	f04f 0500 	mov.w	r5, #0
   d52ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   d52b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d52b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d52ba:	f04f 0600 	mov.w	r6, #0
   d52be:	fbe1 5603 	umlal	r5, r6, r1, r3
   d52c2:	f09c 0f00 	teq	ip, #0
   d52c6:	bf18      	it	ne
   d52c8:	f04e 0e01 	orrne.w	lr, lr, #1
   d52cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d52d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d52d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d52d8:	d204      	bcs.n	d52e4 <__aeabi_dmul+0x80>
   d52da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d52de:	416d      	adcs	r5, r5
   d52e0:	eb46 0606 	adc.w	r6, r6, r6
   d52e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d52e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d52ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d52f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d52f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d52f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d52fc:	bf88      	it	hi
   d52fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5302:	d81e      	bhi.n	d5342 <__aeabi_dmul+0xde>
   d5304:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5308:	bf08      	it	eq
   d530a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d530e:	f150 0000 	adcs.w	r0, r0, #0
   d5312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5316:	bd70      	pop	{r4, r5, r6, pc}
   d5318:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d531c:	ea46 0101 	orr.w	r1, r6, r1
   d5320:	ea40 0002 	orr.w	r0, r0, r2
   d5324:	ea81 0103 	eor.w	r1, r1, r3
   d5328:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d532c:	bfc2      	ittt	gt
   d532e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5332:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5336:	bd70      	popgt	{r4, r5, r6, pc}
   d5338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d533c:	f04f 0e00 	mov.w	lr, #0
   d5340:	3c01      	subs	r4, #1
   d5342:	f300 80ab 	bgt.w	d549c <__aeabi_dmul+0x238>
   d5346:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d534a:	bfde      	ittt	le
   d534c:	2000      	movle	r0, #0
   d534e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5352:	bd70      	pople	{r4, r5, r6, pc}
   d5354:	f1c4 0400 	rsb	r4, r4, #0
   d5358:	3c20      	subs	r4, #32
   d535a:	da35      	bge.n	d53c8 <__aeabi_dmul+0x164>
   d535c:	340c      	adds	r4, #12
   d535e:	dc1b      	bgt.n	d5398 <__aeabi_dmul+0x134>
   d5360:	f104 0414 	add.w	r4, r4, #20
   d5364:	f1c4 0520 	rsb	r5, r4, #32
   d5368:	fa00 f305 	lsl.w	r3, r0, r5
   d536c:	fa20 f004 	lsr.w	r0, r0, r4
   d5370:	fa01 f205 	lsl.w	r2, r1, r5
   d5374:	ea40 0002 	orr.w	r0, r0, r2
   d5378:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d537c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5384:	fa21 f604 	lsr.w	r6, r1, r4
   d5388:	eb42 0106 	adc.w	r1, r2, r6
   d538c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5390:	bf08      	it	eq
   d5392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5396:	bd70      	pop	{r4, r5, r6, pc}
   d5398:	f1c4 040c 	rsb	r4, r4, #12
   d539c:	f1c4 0520 	rsb	r5, r4, #32
   d53a0:	fa00 f304 	lsl.w	r3, r0, r4
   d53a4:	fa20 f005 	lsr.w	r0, r0, r5
   d53a8:	fa01 f204 	lsl.w	r2, r1, r4
   d53ac:	ea40 0002 	orr.w	r0, r0, r2
   d53b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d53b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d53b8:	f141 0100 	adc.w	r1, r1, #0
   d53bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d53c0:	bf08      	it	eq
   d53c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d53c6:	bd70      	pop	{r4, r5, r6, pc}
   d53c8:	f1c4 0520 	rsb	r5, r4, #32
   d53cc:	fa00 f205 	lsl.w	r2, r0, r5
   d53d0:	ea4e 0e02 	orr.w	lr, lr, r2
   d53d4:	fa20 f304 	lsr.w	r3, r0, r4
   d53d8:	fa01 f205 	lsl.w	r2, r1, r5
   d53dc:	ea43 0302 	orr.w	r3, r3, r2
   d53e0:	fa21 f004 	lsr.w	r0, r1, r4
   d53e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d53e8:	fa21 f204 	lsr.w	r2, r1, r4
   d53ec:	ea20 0002 	bic.w	r0, r0, r2
   d53f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d53f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d53f8:	bf08      	it	eq
   d53fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d53fe:	bd70      	pop	{r4, r5, r6, pc}
   d5400:	f094 0f00 	teq	r4, #0
   d5404:	d10f      	bne.n	d5426 <__aeabi_dmul+0x1c2>
   d5406:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d540a:	0040      	lsls	r0, r0, #1
   d540c:	eb41 0101 	adc.w	r1, r1, r1
   d5410:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5414:	bf08      	it	eq
   d5416:	3c01      	subeq	r4, #1
   d5418:	d0f7      	beq.n	d540a <__aeabi_dmul+0x1a6>
   d541a:	ea41 0106 	orr.w	r1, r1, r6
   d541e:	f095 0f00 	teq	r5, #0
   d5422:	bf18      	it	ne
   d5424:	4770      	bxne	lr
   d5426:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d542a:	0052      	lsls	r2, r2, #1
   d542c:	eb43 0303 	adc.w	r3, r3, r3
   d5430:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5434:	bf08      	it	eq
   d5436:	3d01      	subeq	r5, #1
   d5438:	d0f7      	beq.n	d542a <__aeabi_dmul+0x1c6>
   d543a:	ea43 0306 	orr.w	r3, r3, r6
   d543e:	4770      	bx	lr
   d5440:	ea94 0f0c 	teq	r4, ip
   d5444:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5448:	bf18      	it	ne
   d544a:	ea95 0f0c 	teqne	r5, ip
   d544e:	d00c      	beq.n	d546a <__aeabi_dmul+0x206>
   d5450:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5454:	bf18      	it	ne
   d5456:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d545a:	d1d1      	bne.n	d5400 <__aeabi_dmul+0x19c>
   d545c:	ea81 0103 	eor.w	r1, r1, r3
   d5460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5464:	f04f 0000 	mov.w	r0, #0
   d5468:	bd70      	pop	{r4, r5, r6, pc}
   d546a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d546e:	bf06      	itte	eq
   d5470:	4610      	moveq	r0, r2
   d5472:	4619      	moveq	r1, r3
   d5474:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5478:	d019      	beq.n	d54ae <__aeabi_dmul+0x24a>
   d547a:	ea94 0f0c 	teq	r4, ip
   d547e:	d102      	bne.n	d5486 <__aeabi_dmul+0x222>
   d5480:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5484:	d113      	bne.n	d54ae <__aeabi_dmul+0x24a>
   d5486:	ea95 0f0c 	teq	r5, ip
   d548a:	d105      	bne.n	d5498 <__aeabi_dmul+0x234>
   d548c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5490:	bf1c      	itt	ne
   d5492:	4610      	movne	r0, r2
   d5494:	4619      	movne	r1, r3
   d5496:	d10a      	bne.n	d54ae <__aeabi_dmul+0x24a>
   d5498:	ea81 0103 	eor.w	r1, r1, r3
   d549c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d54a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d54a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d54a8:	f04f 0000 	mov.w	r0, #0
   d54ac:	bd70      	pop	{r4, r5, r6, pc}
   d54ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d54b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d54b6:	bd70      	pop	{r4, r5, r6, pc}

000d54b8 <__aeabi_ddiv>:
   d54b8:	b570      	push	{r4, r5, r6, lr}
   d54ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d54be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d54c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d54c6:	bf1d      	ittte	ne
   d54c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d54cc:	ea94 0f0c 	teqne	r4, ip
   d54d0:	ea95 0f0c 	teqne	r5, ip
   d54d4:	f000 f8a7 	bleq	d5626 <__aeabi_ddiv+0x16e>
   d54d8:	eba4 0405 	sub.w	r4, r4, r5
   d54dc:	ea81 0e03 	eor.w	lr, r1, r3
   d54e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d54e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d54e8:	f000 8088 	beq.w	d55fc <__aeabi_ddiv+0x144>
   d54ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d54f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d54f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d54f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d54fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5500:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5504:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5508:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d550c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5510:	429d      	cmp	r5, r3
   d5512:	bf08      	it	eq
   d5514:	4296      	cmpeq	r6, r2
   d5516:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d551a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d551e:	d202      	bcs.n	d5526 <__aeabi_ddiv+0x6e>
   d5520:	085b      	lsrs	r3, r3, #1
   d5522:	ea4f 0232 	mov.w	r2, r2, rrx
   d5526:	1ab6      	subs	r6, r6, r2
   d5528:	eb65 0503 	sbc.w	r5, r5, r3
   d552c:	085b      	lsrs	r3, r3, #1
   d552e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5532:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5536:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d553a:	ebb6 0e02 	subs.w	lr, r6, r2
   d553e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5542:	bf22      	ittt	cs
   d5544:	1ab6      	subcs	r6, r6, r2
   d5546:	4675      	movcs	r5, lr
   d5548:	ea40 000c 	orrcs.w	r0, r0, ip
   d554c:	085b      	lsrs	r3, r3, #1
   d554e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5552:	ebb6 0e02 	subs.w	lr, r6, r2
   d5556:	eb75 0e03 	sbcs.w	lr, r5, r3
   d555a:	bf22      	ittt	cs
   d555c:	1ab6      	subcs	r6, r6, r2
   d555e:	4675      	movcs	r5, lr
   d5560:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5564:	085b      	lsrs	r3, r3, #1
   d5566:	ea4f 0232 	mov.w	r2, r2, rrx
   d556a:	ebb6 0e02 	subs.w	lr, r6, r2
   d556e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5572:	bf22      	ittt	cs
   d5574:	1ab6      	subcs	r6, r6, r2
   d5576:	4675      	movcs	r5, lr
   d5578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d557c:	085b      	lsrs	r3, r3, #1
   d557e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5582:	ebb6 0e02 	subs.w	lr, r6, r2
   d5586:	eb75 0e03 	sbcs.w	lr, r5, r3
   d558a:	bf22      	ittt	cs
   d558c:	1ab6      	subcs	r6, r6, r2
   d558e:	4675      	movcs	r5, lr
   d5590:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5594:	ea55 0e06 	orrs.w	lr, r5, r6
   d5598:	d018      	beq.n	d55cc <__aeabi_ddiv+0x114>
   d559a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d559e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d55a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d55a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d55aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d55ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d55b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d55b6:	d1c0      	bne.n	d553a <__aeabi_ddiv+0x82>
   d55b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d55bc:	d10b      	bne.n	d55d6 <__aeabi_ddiv+0x11e>
   d55be:	ea41 0100 	orr.w	r1, r1, r0
   d55c2:	f04f 0000 	mov.w	r0, #0
   d55c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d55ca:	e7b6      	b.n	d553a <__aeabi_ddiv+0x82>
   d55cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d55d0:	bf04      	itt	eq
   d55d2:	4301      	orreq	r1, r0
   d55d4:	2000      	moveq	r0, #0
   d55d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d55da:	bf88      	it	hi
   d55dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d55e0:	f63f aeaf 	bhi.w	d5342 <__aeabi_dmul+0xde>
   d55e4:	ebb5 0c03 	subs.w	ip, r5, r3
   d55e8:	bf04      	itt	eq
   d55ea:	ebb6 0c02 	subseq.w	ip, r6, r2
   d55ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d55f2:	f150 0000 	adcs.w	r0, r0, #0
   d55f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d55fa:	bd70      	pop	{r4, r5, r6, pc}
   d55fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5600:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5604:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5608:	bfc2      	ittt	gt
   d560a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d560e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5612:	bd70      	popgt	{r4, r5, r6, pc}
   d5614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5618:	f04f 0e00 	mov.w	lr, #0
   d561c:	3c01      	subs	r4, #1
   d561e:	e690      	b.n	d5342 <__aeabi_dmul+0xde>
   d5620:	ea45 0e06 	orr.w	lr, r5, r6
   d5624:	e68d      	b.n	d5342 <__aeabi_dmul+0xde>
   d5626:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d562a:	ea94 0f0c 	teq	r4, ip
   d562e:	bf08      	it	eq
   d5630:	ea95 0f0c 	teqeq	r5, ip
   d5634:	f43f af3b 	beq.w	d54ae <__aeabi_dmul+0x24a>
   d5638:	ea94 0f0c 	teq	r4, ip
   d563c:	d10a      	bne.n	d5654 <__aeabi_ddiv+0x19c>
   d563e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5642:	f47f af34 	bne.w	d54ae <__aeabi_dmul+0x24a>
   d5646:	ea95 0f0c 	teq	r5, ip
   d564a:	f47f af25 	bne.w	d5498 <__aeabi_dmul+0x234>
   d564e:	4610      	mov	r0, r2
   d5650:	4619      	mov	r1, r3
   d5652:	e72c      	b.n	d54ae <__aeabi_dmul+0x24a>
   d5654:	ea95 0f0c 	teq	r5, ip
   d5658:	d106      	bne.n	d5668 <__aeabi_ddiv+0x1b0>
   d565a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d565e:	f43f aefd 	beq.w	d545c <__aeabi_dmul+0x1f8>
   d5662:	4610      	mov	r0, r2
   d5664:	4619      	mov	r1, r3
   d5666:	e722      	b.n	d54ae <__aeabi_dmul+0x24a>
   d5668:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d566c:	bf18      	it	ne
   d566e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5672:	f47f aec5 	bne.w	d5400 <__aeabi_dmul+0x19c>
   d5676:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d567a:	f47f af0d 	bne.w	d5498 <__aeabi_dmul+0x234>
   d567e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5682:	f47f aeeb 	bne.w	d545c <__aeabi_dmul+0x1f8>
   d5686:	e712      	b.n	d54ae <__aeabi_dmul+0x24a>

000d5688 <__aeabi_d2uiz>:
   d5688:	004a      	lsls	r2, r1, #1
   d568a:	d211      	bcs.n	d56b0 <__aeabi_d2uiz+0x28>
   d568c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5690:	d211      	bcs.n	d56b6 <__aeabi_d2uiz+0x2e>
   d5692:	d50d      	bpl.n	d56b0 <__aeabi_d2uiz+0x28>
   d5694:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5698:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d569c:	d40e      	bmi.n	d56bc <__aeabi_d2uiz+0x34>
   d569e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d56a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d56a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d56aa:	fa23 f002 	lsr.w	r0, r3, r2
   d56ae:	4770      	bx	lr
   d56b0:	f04f 0000 	mov.w	r0, #0
   d56b4:	4770      	bx	lr
   d56b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d56ba:	d102      	bne.n	d56c2 <__aeabi_d2uiz+0x3a>
   d56bc:	f04f 30ff 	mov.w	r0, #4294967295
   d56c0:	4770      	bx	lr
   d56c2:	f04f 0000 	mov.w	r0, #0
   d56c6:	4770      	bx	lr

000d56c8 <__cxa_atexit>:
   d56c8:	b510      	push	{r4, lr}
   d56ca:	4c05      	ldr	r4, [pc, #20]	; (d56e0 <__cxa_atexit+0x18>)
   d56cc:	4613      	mov	r3, r2
   d56ce:	b12c      	cbz	r4, d56dc <__cxa_atexit+0x14>
   d56d0:	460a      	mov	r2, r1
   d56d2:	4601      	mov	r1, r0
   d56d4:	2002      	movs	r0, #2
   d56d6:	f3af 8000 	nop.w
   d56da:	bd10      	pop	{r4, pc}
   d56dc:	4620      	mov	r0, r4
   d56de:	e7fc      	b.n	d56da <__cxa_atexit+0x12>
   d56e0:	00000000 	.word	0x00000000

000d56e4 <memcpy>:
   d56e4:	440a      	add	r2, r1
   d56e6:	4291      	cmp	r1, r2
   d56e8:	f100 33ff 	add.w	r3, r0, #4294967295
   d56ec:	d100      	bne.n	d56f0 <memcpy+0xc>
   d56ee:	4770      	bx	lr
   d56f0:	b510      	push	{r4, lr}
   d56f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d56f6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d56fa:	4291      	cmp	r1, r2
   d56fc:	d1f9      	bne.n	d56f2 <memcpy+0xe>
   d56fe:	bd10      	pop	{r4, pc}

000d5700 <memset>:
   d5700:	4402      	add	r2, r0
   d5702:	4603      	mov	r3, r0
   d5704:	4293      	cmp	r3, r2
   d5706:	d100      	bne.n	d570a <memset+0xa>
   d5708:	4770      	bx	lr
   d570a:	f803 1b01 	strb.w	r1, [r3], #1
   d570e:	e7f9      	b.n	d5704 <memset+0x4>

000d5710 <srand>:
   d5710:	b538      	push	{r3, r4, r5, lr}
   d5712:	4b0d      	ldr	r3, [pc, #52]	; (d5748 <srand+0x38>)
   d5714:	681d      	ldr	r5, [r3, #0]
   d5716:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5718:	4604      	mov	r4, r0
   d571a:	b97b      	cbnz	r3, d573c <srand+0x2c>
   d571c:	2018      	movs	r0, #24
   d571e:	f7fe fefb 	bl	d4518 <malloc>
   d5722:	4a0a      	ldr	r2, [pc, #40]	; (d574c <srand+0x3c>)
   d5724:	4b0a      	ldr	r3, [pc, #40]	; (d5750 <srand+0x40>)
   d5726:	63a8      	str	r0, [r5, #56]	; 0x38
   d5728:	e9c0 2300 	strd	r2, r3, [r0]
   d572c:	4b09      	ldr	r3, [pc, #36]	; (d5754 <srand+0x44>)
   d572e:	6083      	str	r3, [r0, #8]
   d5730:	230b      	movs	r3, #11
   d5732:	8183      	strh	r3, [r0, #12]
   d5734:	2201      	movs	r2, #1
   d5736:	2300      	movs	r3, #0
   d5738:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d573c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d573e:	2200      	movs	r2, #0
   d5740:	611c      	str	r4, [r3, #16]
   d5742:	615a      	str	r2, [r3, #20]
   d5744:	bd38      	pop	{r3, r4, r5, pc}
   d5746:	bf00      	nop
   d5748:	2003e5e0 	.word	0x2003e5e0
   d574c:	abcd330e 	.word	0xabcd330e
   d5750:	e66d1234 	.word	0xe66d1234
   d5754:	0005deec 	.word	0x0005deec

000d5758 <strlen>:
   d5758:	4603      	mov	r3, r0
   d575a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d575e:	2a00      	cmp	r2, #0
   d5760:	d1fb      	bne.n	d575a <strlen+0x2>
   d5762:	1a18      	subs	r0, r3, r0
   d5764:	3801      	subs	r0, #1
   d5766:	4770      	bx	lr

000d5768 <dynalib_user>:
   d5768:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5778:	0000 0000 754c 696d 6f6e 6973 7974 2000     ....Luminosity. 
   d5788:	786c 0000                                   lx..

000d578c <_ZTVN5spark13EthernetClassE>:
	...
   d5794:	45a7 000d 459d 000d 4593 000d 4589 000d     .E...E...E...E..
   d57a4:	457d 000d 4571 000d 4d39 000d 4d41 000d     }E..qE..9M..AM..
   d57b4:	4565 000d 455d 000d 4553 000d 4549 000d     eE..]E..SE..IE..
   d57c4:	4d71 000d 7061 0070 5925 252d 2d6d 6425     qM..app.%Y-%m-%d
   d57d4:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d57e4:	6d69 0065                                   ime.

000d57e8 <_ZTV9IPAddress>:
	...
   d57f0:	48a5 000d 4895 000d 4897 000d               .H...H...H..

000d57fc <_ZTV9USBSerial>:
	...
   d5804:	497b 000d 49e3 000d 49b9 000d 4659 000d     {I...I...I..YF..
   d5814:	49ab 000d 497d 000d 498d 000d 49dd 000d     .I..}I...I...I..
   d5824:	499d 000d 4977 000d                         .I..wI..

000d582c <_ZTV11USARTSerial>:
	...
   d5834:	4a85 000d 4af1 000d 4ac9 000d 4659 000d     .J...J...J..YF..
   d5844:	4a99 000d 4ab5 000d 4aa7 000d 4ac3 000d     .J...J...J...J..
   d5854:	4a87 000d 4a8b 000d                         .J...J..

000d585c <_ZTV7TwoWire>:
	...
   d5864:	4b81 000d 4bcb 000d 4ba3 000d 4b83 000d     .K...K...K...K..
   d5874:	4bab 000d 4bb3 000d 4bbb 000d 4bc3 000d     .K...K...K...K..

000d5884 <_ZTVN5spark9WiFiClassE>:
	...
   d588c:	4cdb 000d 4cd1 000d 4cc7 000d 4c7d 000d     .L...L...L..}L..
   d589c:	4cbb 000d 4caf 000d 4d39 000d 4d41 000d     .L...L..9M..AM..
   d58ac:	4ca3 000d 4c9b 000d 4c91 000d 4c87 000d     .L...L...L...L..
   d58bc:	4d71 000d                                   qM..

000d58c0 <_ZTVN5spark12NetworkClassE>:
	...
   d58c8:	4cf9 000d 4d03 000d 4d0d 000d 4d17 000d     .L...M...M...M..
   d58d8:	4d21 000d 4d2d 000d 4d39 000d 4d41 000d     !M..-M..9M..AM..
   d58e8:	4d49 000d 4d55 000d 4d5d 000d 4d67 000d     IM..UM..]M..gM..
   d58f8:	4d71 000d                                   qM..

000d58fc <_ZSt7nothrow>:
	...

000d58fd <link_const_variable_data_end>:
   d58fd:	00          	.byte	0x00
	...

000d5900 <link_constructors_location>:
   d5900:	000d4139 	.word	0x000d4139
   d5904:	000d45b1 	.word	0x000d45b1
   d5908:	000d45e5 	.word	0x000d45e5
   d590c:	000d4631 	.word	0x000d4631
   d5910:	000d470d 	.word	0x000d470d
   d5914:	000d471d 	.word	0x000d471d
   d5918:	000d4755 	.word	0x000d4755
   d591c:	000d4ce5 	.word	0x000d4ce5
   d5920:	000d4e45 	.word	0x000d4e45

000d5924 <link_constructors_end>:
	...
